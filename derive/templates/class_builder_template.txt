	${IMPL_COMMENTS}
        ${VISIBILITY_IMPL} fn build_${VIEW} ${GENERIC_PRE} (options: Vec<${NAME}ConstOptions>) -> Result<impl ${TRAIT}, Error> ${WHERE_CLAUSE} {
		let mut conf = configure!(${NAME}Const, ${NAME}ConstOptions, options)?;
		conf.name = "${VIEW}".to_string();
                conf.is_send = false;
                conf.is_sync = false;
                conf.is_box = false;
                match ${NAME}::builder(conf) {
			Ok(v) => Ok(v),
			Err(e) => err!(CoreErrorKind::Builder, e.kind().to_string()),
		}
        }
       
	${BOX_COMMENTS}
        ${VISIBILITY_BOX} fn build_${VIEW}_box ${GENERIC_PRE} (options: Vec<${NAME}ConstOptions>) -> Result<Box<dyn ${TRAIT}>, Error> ${WHERE_CLAUSE} {
		let mut conf = configure!(${NAME}Const, ${NAME}ConstOptions, options)?;
		conf.name = "${VIEW}".to_string();
                conf.is_send = false;
                conf.is_sync = false;
                conf.is_box = true;
                match ${NAME}::builder(conf) {
                        Ok(v) => Ok(Box::new(v)),
                        Err(e) => err!(CoreErrorKind::Builder, e.kind().to_string()),
                }
        } 


	${START_SEND}

        ${SEND_IMPL_COMMENTS}
        ${VISIBILITY_SEND_IMPL} fn build_${VIEW}_send ${GENERIC_PRE} (options: Vec<${NAME}ConstOptions>) -> Result<impl ${TRAIT} + Send, Error> ${WHERE_CLAUSE} {
                let mut conf = configure!(${NAME}Const, ${NAME}ConstOptions, options)?;
		conf.name = "${VIEW}".to_string();
                conf.is_send = true;
                conf.is_sync = false;
                conf.is_box = false;
                match ${NAME}::builder(conf) {
                        Ok(v) => Ok(v),
                        Err(e) => err!(CoreErrorKind::Builder, e.kind().to_string()),
                }
        }

        ${SEND_BOX_COMMENTS}
        ${VISIBILITY_SEND_BOX} fn build_${VIEW}_send_box ${GENERIC_PRE} (options: Vec<${NAME}ConstOptions>) -> Result<Box<dyn ${TRAIT} + Send>, Error> ${WHERE_CLAUSE} {
                let mut conf = configure!(${NAME}Const, ${NAME}ConstOptions, options)?;
		conf.name = "${VIEW}".to_string();
		conf.is_send = true;
		conf.is_sync = false;
		conf.is_box = true;
                match ${NAME}::builder(conf) {
                        Ok(v) => Ok(Box::new(v)),
                        Err(e) => err!(CoreErrorKind::Builder, e.kind().to_string()),
                }
        }

	${END_SEND}
	${START_SYNC}

        ${SYNC_IMPL_COMMENTS}
        ${VISIBILITY_SYNC_IMPL} fn build_${VIEW}_sync ${GENERIC_PRE} (options: Vec<${NAME}ConstOptions>) -> Result<impl ${TRAIT} + Send + Sync, Error> ${WHERE_CLAUSE} {
                let mut conf = configure!(${NAME}Const, ${NAME}ConstOptions, options)?;
		conf.name = "${VIEW}".to_string();
                conf.is_send = true;
                conf.is_sync = true;
                conf.is_box = false;
                match ${NAME}::builder(conf) {
                        Ok(v) => Ok(v),
                        Err(e) => err!(CoreErrorKind::Builder, e.kind().to_string()),
                }
        }

        ${SYNC_BOX_COMMENTS}
        ${VISIBILITY_SYNC_BOX} fn build_${VIEW}_sync_box ${GENERIC_PRE} (options: Vec<${NAME}ConstOptions>) -> Result<Box<dyn ${TRAIT} + Send + Sync>, Error> ${WHERE_CLAUSE} {
                let mut conf = configure!(${NAME}Const, ${NAME}ConstOptions, options)?;
		conf.name = "${VIEW}".to_string();
                conf.is_send = true;
                conf.is_sync = true;
                conf.is_box = true;
                match ${NAME}::builder(conf) {
                        Ok(v) => Ok(Box::new(v)),
                        Err(e) => err!(CoreErrorKind::Builder, e.kind().to_string()),
                }
        }
	${END_SYNC}
