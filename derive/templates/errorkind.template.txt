impl ErrorKind for ${NAME} {}

impl From<${NAME}> for Error {
	fn from(kind: ${NAME}) -> Error {
		let kind: Box<dyn ErrorKind> = Box::new(kind);
		Error::new(kind)
	}
}

impl std::fmt::Display for ${NAME} {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
                write!(f, "{:?}", self)
        }
}

impl std::fmt::Debug for ${NAME} {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
		${PRINT_ERRORS}
                Ok(())
        }
}
