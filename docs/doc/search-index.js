var searchIndex = new Map(JSON.parse('[\
["bmw",{"doc":"Bitcoin Mimblewimble (BMW)","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["bmw_conf",{"doc":"The BMW Configuration crate","t":"PPKFGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNMNNNNQNNNNNNNMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AutoRotate","AutoRotate","Config","ConfigBuilder","ConfigOption","ConfigOptionName","Debug","Debug","DebugLargeSlabCount","DebugLargeSlabCount","DeleteRotation","DeleteRotation","DisplayBackTrace","DisplayBackTrace","DisplayColors","DisplayColors","DisplayLineNum","DisplayLineNum","DisplayLogLevel","DisplayLogLevel","DisplayMillis","DisplayMillis","DisplayStdout","DisplayStdout","DisplayTimestamp","DisplayTimestamp","End","End","EvhHouseKeeperFrequencyMillis","EvhHouseKeeperFrequencyMillis","EvhReadSlabCount","EvhReadSlabCount","EvhReadSlabSize","EvhReadSlabSize","EvhStatsUpdateMillis","EvhStatsUpdateMillis","EvhThreads","EvhThreads","EvhTimeout","EvhTimeout","FileHeader","FileHeader","GlobalSlabAllocator","GlobalSlabAllocator","IsCaseSensitive","IsCaseSensitive","IsHashset","IsHashset","IsHashtable","IsHashtable","IsList","IsList","IsMultiLine","IsMultiLine","IsSync","IsSync","IsTerminationPattern","IsTerminationPattern","LineNumDataMaxLen","LineNumDataMaxLen","LogFilePath","LogFilePath","MatchId","MatchId","MaxAgeMillis","MaxAgeMillis","MaxEntries","MaxEntries","MaxLoadFactor","MaxLoadFactor","MaxSize","MaxSize","MaxSizeBytes","MaxSizeBytes","MaxWildCardLength","MaxWildCardLength","MinSize","MinSize","PatternId","PatternId","Regex","Regex","SlabCount","SlabCount","SlabSize","SlabSize","Start","Start","SyncChannelSize","SyncChannelSize","TerminationLength","TerminationLength","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_config","check_config","clone","clone","clone_into","clone_into","config","eq","eq","fmt","fmt","from","from","from","get","get_or_bool","get_or_f64","get_or_string","get_or_u16","get_or_u64","get_or_usize","hash","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_name","type_name","type_name","vzip","vzip","vzip"],"q":[[0,"bmw_conf"],[151,"dyn_clone::sealed"],[152,"alloc::vec"],[153,"alloc::boxed"],[154,"bmw_err::types"],[155,"core::result"],[156,"core::fmt"],[157,"core::fmt"],[158,"alloc::string"],[159,"core::hash"],[160,"core::any"],[161,"alloc::sync"],[162,"alloc::rc"],[163,"core::any"]],"d":["","","The config trait allows for easy construction of …","A builder struct which can be used to build configs. This …","Configuration options used throughout BMW via macro.","Names of configuration options used throughout BMW via …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build a config based on the specified <code>std::vec::Vec</code> of …","Checks a configuration and returns <code>Ok(())</code> if the …","","","","","The config macro allows for a configuration to be …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a configuration option if it exists or …","Gets a <code>bool</code> configuration option if it exists. If it doesn…","Gets a <code>f64</code> configuration option if it exists. If it doesn…","Gets a <code>std::string::String</code> configuration option if it …","Gets a <code>bool</code> configuration option if it exists. If it doesn…","Gets a <code>u64</code> configuration option if it exists. If it doesn…","Gets a <code>usize</code> configuration option if it exists. If it doesn…","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[7,3,0,0,0,0,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,25,7,3,25,7,3,25,5,7,3,7,3,0,7,3,7,3,25,7,3,5,5,5,5,5,5,5,7,25,7,3,25,7,3,25,7,3,25,7,3,7,3,25,7,3,25,7,3,25,7,3,25,7,3,25,7,3],"f":"````````````````````````````````````````````````````````````````````````````````````````````{{cb}d{}}0{ce{}{}}00000{{{h{f}}}{{l{j}}}}{{j{h{n}}{h{n}}}{{Ab{dA`}}}}{nn}{ff}{{ce}d{}{}}0`{{nn}Ad}{{ff}Ad}{{nAf}Ah}{{fAf}Ah}{cc{}}00{{jn}{{Aj{f}}}}{{jnAd}Ad}{{jnAl}Al}{{jnAn}An}{{jnB`}B`}{{jnBb}Bb}{{jnBd}Bd}{{nc}dBf}{ce{}{}}00{{{l{c}}}{{l{Bh}}}{}}00{{{Bj{c}}}{{Bj{Bh}}}{}}00{{{Bl{c}}}{{Bl{Bh}}}{}}0033{c{{Ab{e}}}{}{}}00000{cBn{}}00{cC`{}}00666","c":[],"p":[[5,"Private",151],[1,"unit"],[6,"ConfigOption",0],[5,"Vec",152],[10,"Config",0],[5,"Box",153],[6,"ConfigOptionName",0],[5,"Error",154],[6,"Result",155],[1,"bool"],[5,"Formatter",156],[8,"Result",156],[6,"Option",157],[1,"f64"],[5,"String",158],[1,"u16"],[1,"u64"],[1,"usize"],[10,"Hasher",159],[10,"Any",160],[5,"Arc",161],[5,"Rc",162],[5,"TypeId",160],[1,"str"],[5,"ConfigBuilder",0]],"b":[]}],\
["bmw_deps",{"doc":"The BMW Dependency crate","t":"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE","n":["backtrace","base64","bitvec","byteorder","chrono","colored","dirs","downcast","dyn_clone","errno","failure","failure_derive","flate2","futures","itertools","lazy_static","libc","math","nix","num_format","path_clean","portpicker","rand","rand_core","random_string","ring","rustls","rustls_pemfile","rustls_pki_types","sha1","substring","url","webpki","webpki_roots"],"q":[[0,"bmw_deps"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"``````````````````````````````````","c":[],"p":[],"b":[]}],\
["bmw_derive",{"doc":"The BMW Derive crate","t":"Y","n":["Serializable"],"q":[[0,"bmw_derive"]],"d":["This is a proc macro for implementing the …"],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["bmw_err",{"doc":"The BMW Error crate","t":"PPPPPPPPPPPPGPPFGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNQNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNQNNNNNNNNN","n":["Alloc","Alloc","ArrayIndexOutOfBounds","ArrayIndexOutOfBounds","CapacityExceeded","CapacityExceeded","Configuration","Configuration","CorruptedData","CorruptedData","Crypt","Crypt","ErrKind","Errno","Errno","Error","ErrorKind","Http","Http","IO","IO","IllegalArgument","IllegalArgument","IllegalState","IllegalState","Log","Log","Misc","Misc","OperationNotSupported","OperationNotSupported","Overflow","Overflow","Poison","Poison","Rustlet","Rustlet","Rustls","Rustls","SystemTime","SystemTime","Test","Test","ThreadPanic","ThreadPanic","Timeout","Timeout","UnexpectedEof","UnexpectedEof","Utf8","Utf8","__clone_box","as_fail","as_fail","backtrace","backtrace","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","cause","cause","cbreak","clone","clone_into","eq","eq","err","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","inner","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","kind","map_err","name","name","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_name","type_name","type_name","vzip","vzip","vzip"],"q":[[0,"bmw_err"],[136,"dyn_clone::sealed"],[137,"failure"],[138,"failure::backtrace"],[139,"core::option"],[140,"core::fmt"],[141,"core::fmt"],[142,"std::time"],[143,"core::alloc::layout"],[144,"std::io::error"],[145,"rustls::error"],[146,"std::sync::mpsc"],[147,"core::str::error"],[148,"std::sync::mutex"],[149,"std::sync::poison"],[150,"core::num::error"],[151,"std::ffi::os_str"],[152,"url::parser"],[153,"webpki::error"],[154,"core::net::parser"],[155,"alloc::string"],[156,"std::sync::rwlock"],[157,"std::sync::mpsc"],[158,"core::convert"],[159,"std::sync::rwlock"],[160,"core::any"],[161,"alloc::sync"],[162,"alloc::rc"],[163,"core::result"],[164,"core::any"]],"d":["Memory allocation error","Memmory Allocation Error","An array index was out of bounds","ArrayIndexOutOfBounds","The capacity is exceeded","Capacity Exceeded","Configuration error","Configuration Error","Data is corrupted","CorruptedData","Crypt error","BMW Crypt Error","The kinds of errors in this crate. This enum is used to …","Errno system error","Errno system error","Base Error struct which is used throughout BMW.","Kinds of errors that can occur.","Http error","Http Error","IO Error","IO Error","Illegal argument was specified","IllegalArgument","Application is in an illegal state","Illegal State","Log Error","Log Error","A Miscellaneous Error occurred","Miscellaneous Error","Operation not supported","Operation not supported","Overflow error","Overflow error","Attempt to obtain a lock resulted in a poison error. See …","Poison error multiple locks","Rustlet error","Rustlet Error","Rustls error","Rustls Error","System time error","system time error","A simulated error used in tests","Simulated Error used in testing","Thread panic","Thread Panic","A timeout has occurred","Timeout","Unexpected end of file","UnexpectedEof Error","A conversion to the UTF-8 format resulted in an error","UTF8 Error","","","","","get the backtrace (if available) of this error.","","","","","","","","","get the cause (if available) of this error.","","Macro to do a conditional break","","","","","Build the specified <code>crate::ErrorKind</code> and convert it into …","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","get the inner error as a string.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","get the kind of error that occurred.","Map the specified error into the <code>crate::ErrKind</code> enum name …","","","","","","","","","","","","Macro to map the try_from error into an appropriate error.","","","","","","","","",""],"i":[40,7,40,7,40,7,40,7,40,7,40,7,0,40,7,0,0,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,40,7,7,4,7,4,4,7,40,4,7,40,4,7,4,4,7,0,7,7,4,7,0,4,4,7,7,40,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,4,40,4,7,40,4,7,40,4,7,40,4,7,4,0,4,7,7,4,7,40,4,7,40,4,7,0,40,4,7,40,4,7,40,4,7],"f":"```````````````````````````````````````````````````{{cb}d{}}{cf{}}0{h{{l{j}}}}0{n{{l{j}}}}{ce{}{}}00000{h{{l{f}}}}0{n{{l{f}}}}`{nn}{{ce}d{}{}}{{hh}A`}{{nn}A`}`{{hAb}Ad}0{{nAb}Ad}0{cc{}}{Afh}{Ahh}{Ajh}{Alh}{Anh}{B`h}{Bbh}{nh}{{{Bf{{Bd{c}}}}}h{}}9{Bhh}{Bjh}{Blh}{Bnh}{C`h}{Cbh}{Cdh}{{{Bf{{Cf{c}}}}}h{}}{{{Ch{c}}}h{}}{Cjh}{Clh}{{{Bf{{Cn{c}}}}}h{}}{cc{}}{hD`}{ce{}{}}00{{{Db{c}}}{{Db{Dd}}}{}}00{{{Df{c}}}{{Df{Dd}}}{}}00{{{Dh{c}}}{{Dh{Dd}}}{}}00{hn}`{h{{l{Dj}}}}{n{{l{Dj}}}}6{cD`{}}0{c{{Dl{e}}}{}{}}00000`{cDn{}}00{cDj{}}00:::","c":[],"p":[[5,"Private",136],[1,"unit"],[10,"Fail",137],[5,"Error",0],[5,"Backtrace",138],[6,"Option",139],[6,"ErrorKind",0],[1,"bool"],[5,"Formatter",140],[8,"Result",140],[5,"ParseIntError",141],[5,"SystemTimeError",142],[5,"LayoutError",143],[5,"Error",144],[6,"Error",145],[5,"RecvError",146],[5,"Utf8Error",147],[5,"MutexGuard",148],[5,"PoisonError",149],[5,"TryFromIntError",141],[6,"Errno",150],[5,"OsString",151],[6,"ParseError",152],[6,"Error",153],[5,"AddrParseError",154],[5,"FromUtf8Error",155],[5,"RwLockReadGuard",156],[5,"SendError",146],[5,"InvalidDnsNameError",157],[6,"Infallible",158],[5,"RwLockWriteGuard",156],[5,"String",155],[5,"Box",159],[10,"Any",160],[5,"Arc",161],[5,"Rc",162],[1,"str"],[6,"Result",163],[5,"TypeId",160],[6,"ErrKind",0]],"b":[[54,"impl-Fail-for-Error"],[55,"impl-Error"],[63,"impl-Fail-for-Error"],[64,"impl-Error"],[72,"impl-Display-for-Error"],[73,"impl-Debug-for-Error"],[74,"impl-Display-for-ErrorKind"],[75,"impl-Debug-for-ErrorKind"],[77,"impl-From%3CParseIntError%3E-for-Error"],[78,"impl-From%3CSystemTimeError%3E-for-Error"],[79,"impl-From%3CLayoutError%3E-for-Error"],[80,"impl-From%3CError%3E-for-Error"],[81,"impl-From%3CError%3E-for-Error"],[82,"impl-From%3CRecvError%3E-for-Error"],[83,"impl-From%3CUtf8Error%3E-for-Error"],[84,"impl-From%3CErrorKind%3E-for-Error"],[85,"impl-From%3CPoisonError%3CMutexGuard%3C\'_,+T%3E%3E%3E-for-Error"],[87,"impl-From%3CTryFromIntError%3E-for-Error"],[88,"impl-From%3CErrno%3E-for-Error"],[89,"impl-From%3COsString%3E-for-Error"],[90,"impl-From%3CParseError%3E-for-Error"],[91,"impl-From%3CError%3E-for-Error"],[92,"impl-From%3CAddrParseError%3E-for-Error"],[93,"impl-From%3CFromUtf8Error%3E-for-Error"],[94,"impl-From%3CPoisonError%3CRwLockReadGuard%3C\'_,+T%3E%3E%3E-for-Error"],[95,"impl-From%3CSendError%3CT%3E%3E-for-Error"],[96,"impl-From%3CInvalidDnsNameError%3E-for-Error"],[97,"impl-From%3CInfallible%3E-for-Error"],[98,"impl-From%3CPoisonError%3CRwLockWriteGuard%3C\'_,+T%3E%3E%3E-for-Error"]]}],\
["bmw_evh",{"doc":"This crate defines and implements the <code>crate::EventHandler</code>. …","t":"FFFFKFKFFFISSSFFFFFFNNNNNNNMNMONNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNOMNNNNNNNNNNNNNNNNNHHNNNMMQMNNNNNNNNNNNNNNNNNNMNMNMNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNOOONNOONONNMMMMMMNOMMNNOHOMNOONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNMNON","n":["AttachmentHolder","Builder","ClientConnection","CloseHandle","ConnData","ConnectionData","EventHandler","EventHandlerConfig","EventHandlerController","EventHandlerData","Handle","READ_SLAB_DATA_SIZE","READ_SLAB_NEXT_OFFSET","READ_SLAB_SIZE","ServerConnection","ThreadContext","TlsClientConfig","TlsServerConfig","WriteHandle","WriteState","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add_client","add_client","add_server","attachment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_slab_allocator","borrow_slab_allocator","build_evh","certificates_file","clear_through","clear_through","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","close","close_handle","create_listeners","default","eq","eq","event_handler_controller","event_handler_data","eventhandler","first_slab","first_slab","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_accept_handle","get_accept_handle","get_connection_id","get_connection_id","get_handle","get_handle","handle","handle","handles","housekeeping_frequency_millis","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_async","is_closed","is_reuse_port","last_slab","last_slab","max_events","max_events_in","max_handles_per_thread","new","new","nhandles_queue_size","private_key_file","read","read_slab_count","resume","set_async","set_housekeeper","set_on_accept","set_on_close","set_on_panic","set_on_read","slab_offset","slab_offset","sni_host","start","stop","stop","suspend","sync_channel_size","tcp_stream_to_handle","threads","tid","tid","tls_config","tls_config","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trigger_on_read","trusted_cert_full_chain_file","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","user_data","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","write_handle","write_handle","write_queue_size","write_state"],"q":[[0,"bmw_evh"],[296,"dyn_clone::sealed"],[297,"core::any"],[298,"alloc::boxed"],[299,"bmw_err::types"],[300,"core::result"],[301,"bmw_util::types"],[302,"core::ops::function"],[303,"core::option"],[304,"core::marker"],[305,"core::clone"],[306,"core::marker"],[307,"core::fmt"],[308,"alloc::rc"],[309,"bmw_ser::types"],[310,"std::net::tcp"],[311,"core::any"]],"d":["","The structure that builds eventhandlers.","A struct which specifies a client connection.","A struct which can be used to close a connection (note: if …","This trait which is implemented by <code>crate::ConnectionData</code>. …","A struct which is passed to several of the callbacks in …","This trait defines the behaviour of an eventhandler. See …","The configuration for the <code>crate::EventHandler</code>.","Since […","","","The size of the data which is stored in read slabs. This …","","","A struct which specifies a server connection.","A thread context which is passed to the callbacks …","TlsClientConfig specifies the configuration for a tls …","TlsServerConfig specifies the configuration for a tls …","A struct which is used to write to a connection.","","","","","","","","","Add a <code>crate::ClientConnection</code> to this <code>crate::EventHandler</code>.","","Add a <code>crate::ServerConnection</code> to this <code>crate::EventHandler</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","borrows, immutably, the slab allocator associated with …","","Builds a <code>crate::EventHandler</code> instance based on the …","The location of the certificates file (fullchain.pem).","Clears data in slabs from memory up to and including …","","","","","","","","","","","","","","","","Close the connection associated with this …","Close the connection associated with this …","Close a handle (platform independant)","Create listeners for use with the <code>crate::ServerConnection</code> …","","","","Return an instance of a <code>crate::EventHandlerController</code> that …","Get the eventhandler data array","Build an <code>crate::EventHandler</code> instance. See module level …","Returns the first slab in which data has been read for …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the handle (if any) which this connection was …","","Returns the connection id of this event.","","Returns the handle of this event.","","","The handle (file desciptor on Unix and file handle on …","An array of handles. The size of this array must be equal …","The frequency at which the housekeeper callback is …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if the <code>crate::WriteHandle</code> is closed. Otherwise …","","Returns the last slab in which data has been read for this …","","The maximum events that are returned by the eventhandler …","The maximum events to register to the eventhandler per …","The maximum number of handles per thread. The default …","","","The queue size for the new handles in this …","The location of the private_key file (privkey.pem).","","The number of read slabs for this eventhandler. The …","Resume reads/writes in the <code>crate::EventHandler</code>. This must …","","sets the housekeeper callback for this <code>crate::EventHandler</code>…","sets the on accept callback for this <code>crate::EventHandler</code>. …","sets the on close callback for this <code>crate::EventHandler</code>. …","sets the on panic callback for this <code>crate::EventHandler</code>. …","sets the on read callback for this <code>crate::EventHandler</code>. …","Returns the offset that data has been read to in the most …","","The sni_host you are connecting to.","Start the <code>crate::EventHandler</code>.","Stop this <code>crate::EventHandler</code> and free all resources …","","Suspend any reads/writes in the <code>crate::EventHandler</code> for …","the size of the sync_channel for the <code>bmw_util::ThreadPool</code> …","","the number of threads for this <code>crate::EventHandler</code>. The …","Returns the thread id that this event occurred on.","","The optional tls configuration for this client.","This is an optional TlsServerConfig for this connection. …","","","","","","","","","An optional trusted cert full chain file for this tls …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","User may set this to any value and it is passed to the …","","","","","","","","","","","","","","","Write data to the connection associated with this …","","Returns a write handle which can be used to write to this …","","the size of the write_queue for this <code>crate::EventHandler</code>. …","Return the write state for this write_handle."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,7,17,10,19,27,28,3,10,3,19,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,4,11,16,29,49,26,35,7,17,10,19,27,28,12,16,49,26,12,16,26,7,17,10,19,27,28,26,7,17,10,19,27,28,29,7,0,0,17,26,35,3,3,0,12,16,26,19,27,18,4,11,16,29,49,26,35,7,17,10,19,27,28,12,16,12,16,12,16,7,4,11,17,7,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,4,11,16,29,49,26,35,7,17,10,19,27,28,27,7,11,12,16,17,17,17,18,29,17,26,27,17,7,27,3,3,3,3,3,12,16,35,3,3,10,7,17,0,17,12,16,4,11,26,7,17,10,19,27,28,7,35,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,4,11,16,29,49,26,35,7,17,10,19,27,28,18,18,4,11,16,29,49,26,35,7,17,10,19,27,28,7,27,12,16,17,7],"f":"````````````````````{{cb}d{}}000000{{fh{l{j}}}{{Ab{nA`}}}}{{Adh{l{j}}}{{Ab{nA`}}}}{{fAf{l{j}}}{{Ab{dA`}}}}`{ce{}{}}000000000000000000000000000{{Ahe}{{Ab{cA`}}}{}{{An{{l{Aj}}}{{Al{{Ab{cA`}}}}}}}}{{B`e}{{Ab{cA`}}}{}{{An{{l{Aj}}}{{Al{{Ab{cA`}}}}}}}}{Bb{{Ab{{`{{f{cegik}}}}A`}}}{{An{B`Bd{Bh{Bf}}}{{Al{{Ab{dA`}}}}}}BjBlBnC`}{{An{B`Bd}{{Al{{Ab{dA`}}}}}}BjBlBnC`}{{An{B`Bd}{{Al{{Ab{dA`}}}}}}BjBlBnC`}{{An{Bd}{{Al{{Ab{dA`}}}}}}BjBlBnC`}{{An{Bd{l{j}}}{{Al{{Ab{dA`}}}}}}BjBlBnC`}}`{{AhCb}{{Ab{dA`}}}}{{B`Cb}{{Ab{dA`}}}}{CdCd}{nn}{BbBb}{AdAd}{BfBf}{CfCf}{ChCh}{{ce}d{}{}}000000{Cj{{Ab{dA`}}}}{n{{Ab{dA`}}}}{Cl{{Ab{dA`}}}}{{CnD`CnDb}{{Ab{{Dd{Cl}}A`}}}}{{}Bb}{{CdCd}Db}{{DfDf}Db}{f{{Ab{AdA`}}}}{f{{Ab{{Dd{{l{Dh}}}}A`}}}}`{AhCb}{B`Cb}{{CdDj}Dl}{{BfDj}Dl}{{CfDj}Dl}{cc{}}0000000000000{Ah{{Bh{Cl}}}}{B`{{Bh{Cl}}}}{AhDn}{B`Dn}{AhCl}{B`Cl}{nCl}```{nDn}{ce{}{}}0000000000000{{{l{c}}}{{l{j}}}{}}0000000000000{{{E`{c}}}{{E`{j}}}{}}0000000000000{{{Eb{c}}}{{Eb{j}}}{}}0000000000000{CfDb}{n{{Ab{DbA`}}}}`{AhCb}{B`Cb}```{{}Bd}{{{l{Dh}}Dn{l{Dh}}}Cj}``{c{{Ab{CfA`}}}Ed}`{n{{Ab{dA`}}}}{{CfDb}d}{{fc}{{Ab{dA`}}}{{An{Bd}{{Al{{Ab{dA`}}}}}}BjBlBnC`}}{{fc}{{Ab{dA`}}}{{An{B`Bd}{{Al{{Ab{dA`}}}}}}BjBlBnC`}}0{{fc}{{Ab{dA`}}}{{An{Bd{l{j}}}{{Al{{Ab{dA`}}}}}}BjBlBnC`}}{{fc}{{Ab{dA`}}}{{An{B`Bd{Bh{Bf}}}{{Al{{Ab{dA`}}}}}}BjBlBnC`}}{AhEf}{B`Ef}`{f{{Ab{dA`}}}}0{Ad{{Ab{dA`}}}}9`{Eh{{Ab{ClA`}}}}`{AhCn}{B`Cn}``{ce{}{}}000000=`{c{{Ab{e}}}{}{}}000000000000000000000000000{cEj{}}0000000000000{cD`{}}0000000000000`33333333333333{{n{En{El}}}{{Ab{dA`}}}}{{Cfc}{{Ab{dA`}}}F`}{Ahn}{B`n}`{n{{Ab{{l{Dh}}A`}}}}","c":[],"p":[[5,"Private",296],[1,"unit"],[10,"EventHandler",0],[5,"ClientConnection",0],[10,"Any",297],[5,"Box",298],[5,"WriteHandle",0],[5,"Error",299],[6,"Result",300],[5,"EventHandlerController",0],[5,"ServerConnection",0],[10,"ConnData",0],[10,"SlabAllocator",301],[17,"Output"],[10,"FnMut",302],[5,"ConnectionData",0],[5,"EventHandlerConfig",0],[5,"ThreadContext",0],[5,"AttachmentHolder",0],[6,"Option",303],[10,"Send",304],[10,"Clone",305],[10,"Sync",304],[10,"Unpin",304],[1,"u32"],[5,"TlsServerConfig",0],[5,"WriteState",0],[5,"EventHandlerData",0],[5,"CloseHandle",0],[8,"Handle",0],[1,"usize"],[1,"str"],[1,"bool"],[5,"Array",301],[5,"TlsClientConfig",0],[10,"LockBox",301],[5,"Formatter",306],[8,"Result",306],[1,"u128"],[5,"Arc",307],[5,"Rc",308],[10,"Reader",309],[1,"u16"],[5,"TcpStream",310],[5,"TypeId",297],[1,"u8"],[1,"slice"],[10,"Writer",309],[5,"Builder",0]],"b":[]}],\
["bmw_evh2",{"doc":"","t":"FKFFKFNOMMNNNNNNNNNNNMMNNMNOMOOQQNNNNNMNNNNNNNNNNNNNNNNNOMMMMMMMNNNNNNNNNNNNNNNNNNNNNNMNN","n":["Connection","EventHandler","EvhBuilder","EvhStats","UserContext","WriteHandle","__clone_box","accepts","add_client_connection","add_server_connection","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_client_connection","build_evh","build_server_connection","clear_all","clear_through","clone","clone_into","clone_next_chunk","close","closes","cur_slab_id","delay_writes","event_loops","evh","evh_oro","fmt","from","from","from","from","get_user_data","id","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","reads","set_on_accept","set_on_close","set_on_housekeeper","set_on_panic","set_on_read","set_user_data","start","to_owned","trigger_on_read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","vzip","vzip","vzip","vzip","wait_for_stats","write","write_handle"],"q":[[0,"bmw_evh2"],[89,"dyn_clone::sealed"],[90,"bmw_err::types"],[91,"core::result"],[92,"bmw_conf::types"],[93,"alloc::vec"],[94,"alloc::boxed"],[95,"core::fmt"],[96,"core::fmt"],[97,"core::option"],[98,"alloc::sync"],[99,"alloc::rc"],[100,"core::ops::function"],[101,"core::marker"],[102,"core::clone"],[103,"core::marker"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,15,15,3,3,4,32,5,15,4,32,5,15,32,32,32,14,14,15,15,14,5,15,14,15,15,0,0,15,4,32,5,15,14,4,4,32,5,15,4,32,5,15,4,32,5,15,4,32,5,15,15,3,3,3,3,3,14,3,15,5,4,32,5,15,4,32,5,15,4,32,5,15,4,32,5,15,4,32,5,15,3,5,4],"f":"``````{{cb}d{}}`{{fh}{{n{jl}}}}{{fh}{{n{dl}}}}{ce{}{}}0000000{{A`Ab}{{n{hl}}}}{{{Af{Ad}}}{{n{{Ah{f}}l}}}}{{A`Aj}{{n{hl}}}}{{Alh}{{n{dl}}}}{{AlAjh}{{n{dl}}}}{AnAn}{{ce}d{}{}}{{Alh{Bb{B`}}}{{n{Ajl}}}}{j{{n{dl}}}}`{AlAj}````{{AnBd}Bf}{cc{}}000{Al{{Bj{{Ah{Bh}}}}}}{hBl}>>>>{{{Ah{c}}}{{Ah{Bh}}}{}}000{{{Bn{c}}}{{Bn{Bh}}}{}}000{{{C`{c}}}{{C`{Bh}}}{}}000`{{fc}{{n{dl}}}{{Cd{h{Ah{Al}}}{{Cb{{n{dl}}}}}}CfChCjCl}}0{{fc}{{n{dl}}}{{Cd{{Ah{Al}}}{{Cb{{n{dl}}}}}}CfChCjCl}}{{fc}{{n{dl}}}{{Cd{{Ah{Al}}{Ah{Bh}}}{{Cb{{n{dl}}}}}}CfChCjCl}}2{{Al{Ah{Bh}}}d}{f{{n{dl}}}}{ce{}{}}>{c{{n{e}}}{}{}}0000000{cCn{}}000{cA`{}}0003333{f{{n{Anl}}}}{{j{Bb{B`}}}{{n{dl}}}}{h{{n{jl}}}}","c":[],"p":[[5,"Private",89],[1,"unit"],[10,"EventHandler",0],[5,"Connection",0],[5,"WriteHandle",0],[5,"Error",90],[6,"Result",91],[1,"str"],[1,"u16"],[6,"ConfigOption",92],[5,"Vec",93],[5,"Box",94],[1,"usize"],[10,"UserContext",0],[5,"EvhStats",0],[1,"u8"],[1,"slice"],[5,"Formatter",95],[8,"Result",95],[10,"Any",96],[6,"Option",97],[1,"u128"],[5,"Arc",98],[5,"Rc",99],[17,"Output"],[10,"FnMut",100],[10,"Send",101],[10,"Clone",102],[10,"Sync",101],[10,"Unpin",101],[5,"TypeId",96],[5,"EvhBuilder",0]],"b":[]}],\
["bmw_http",{"doc":"","t":"PPPPFPPPGGPPPPPPPPPPEEFSPPPKFFFKFFFIFFFGGKFKKFGPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPFFPPPPPPPEEFSKFFKFFFIFGPNNNNNNNNNNNNNNNNNNNNNMONOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNMMMNMOMONMOMOOONNNNNNNNONNNNNNNNNNNNNNNNNNOONNNNNOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOMNNNNMMNONOOQQQQQQQOOONNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOMNOOOONNOOOOOOOOONONNNMOMOONNMMMNNOOOMOOMMMMMNNMOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOMMNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNQQQQQOOQ","n":["Accept","Accept","BaseDir","Binary","Builder","CLOSE","CONNECT","Close","ConfigOption","ConnectionType","ContentData","ContentFile","DELETE","Debug","EvhReadSlabCount","FullChainCertFile","GET","HEAD","HTTP10","HTTP11","HTTP_CLIENT_CONTAINER","HTTP_CLIENT_CONTAINER","HTTP_CLIENT_CONTAINER","HTTP_CLIENT_CONTEXT","Header","Host","HouseKeepingFrequencyMillis","HttpClient","HttpClientConfig","HttpClientContainer","HttpConfig","HttpConnection","HttpConnectionConfig","HttpConnectionData","HttpContentReader","HttpHandler","HttpHeader","HttpHeaders","HttpInstance","HttpInstanceType","HttpMethod","HttpRequest","HttpRequestConfig","HttpResponse","HttpServer","HttpStats","HttpVersion","Instance","KeepAlive","KeepAlive","Masked","MaxEvents","MaxEventsIn","MaxHandlesPerThread","MaxHeadersLen","Method","NhandlesQueueSize","OPTIONS","OTHER","Open","PATCH","POST","PUT","Ping","Plain","PlainConfig","Pong","Port","PrivKeyFile","Protocols","SlabCount","SyncChannelSize","TRACE","Text","Threads","TimeoutMillis","Tls","Tls","TlsConfig","TlsConfigFiles","TlsServerConfig","UNKNOWN","UNKNOWN","Uri","Url","UserAgent","Version","WEBSOCKET_CLIENT_CONTAINER","WEBSOCKET_CLIENT_CONTAINER","WEBSOCKET_CLIENT_CONTAINER","WEBSOCKET_CLIENT_CONTEXT","WebSocketClient","WebSocketClientConfig","WebSocketClientContainer","WebSocketConnection","WebSocketConnectionConfig","WebSocketData","WebSocketHandle","WebSocketHandler","WebSocketMessage","WebSocketMessageType","WriteQueueSize","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","accept","accept","accept_gzip","addr","attachment","attachment","base_dir","base_dir","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bring_to_front_weight","build_http_client","build_http_connection","build_http_request","build_http_server","build_websocket_client","cache_slab_count","callback","callback_extensions","callback_mappings","cert_file","cert_file","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","close","close","code","config","connect","connection","content_data","content_data","content_file","content_file","content_length","content_reader","content_slab_count","controller","debug","debug","debug","default","default","default","default","default","default","default","default","default_file","deref","deref","downcast","downcast","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_mut","downcast_rc","downcast_rc","downcast_rc","downcast_rc","downcast_ref","downcast_ref","downcast_ref","downcast_ref","end_header_name","end_header_value","eq","eq","eq","eq","eq","error_400file","error_403file","error_404file","evh_config","evh_housekeeping_frequency_millis","evh_housekeeping_frequency_millis","evh_max_events","evh_max_events","evh_max_events_in","evh_max_events_in","evh_max_handles_per_thread","evh_max_handles_per_thread","evh_nhandles_queue_size","evh_nhandles_queue_size","evh_read_slab_count","evh_read_slab_count","evh_sync_channel_size","evh_sync_channel_size","evh_threads","evh_threads","evh_write_queue_size","evh_write_queue_size","extension","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","full_chain","full_chain","full_chain_cert_file","full_chain_cert_file","guid","has_range","header_count","header_name","header_value","headers","headers","headers","headers","host","host","host","http_client_init","http_client_request","http_client_response","http_client_send","http_client_stop","http_connection","http_connection_close","http_dir_map","http_dir_map","idle_timeout","if_modified_since","if_none_match","init","init","instance_type","instances","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is","is","is","is","is_websocket_upgrade","keep_alive","keep_alive","listen_queue_size","masked","max_header_count","max_headers_len","max_headers_len","max_uri_len","method","method","method","mime_map","mtype","negotiated_protocol","new","path","path","path","payload","port","port","port","privkey_file","privkey_file","protocols","query","query","range_end","range_start","read","request_uri","request_uri","request_url","request_url","restat_file_frequency_in_millis","sec_websocket_key","sec_websocket_protocol","send","send","send","send","send_masked","server_name","server_version","slab_count","start","start_header_name","start_header_value","stats","status_text","stop","stop","stop","stop","stop","timeout_millis","timeout_millis","tls","tls","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","uri_length","user_agent","user_agent","version","version","version","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","websocket_client_init","websocket_client_stop","websocket_connection","websocket_connection_config","websocket_handle","websocket_handler","websocket_mappings","websocket_message"],"q":[[0,"bmw_http"],[761,"dyn_clone::sealed"],[762,"alloc::string"],[763,"bmw_err::types"],[764,"core::result"],[765,"alloc::boxed"],[766,"alloc::vec"],[767,"core::option"],[768,"bmw_evh::types"],[769,"std::thread"],[770,"std::collections::hash::map"],[771,"std::sync::rwlock"],[772,"alloc::sync"],[773,"downcast"],[774,"downcast"],[775,"core::fmt"],[776,"core::fmt"],[777,"std::io::error"],[778,"core::any"]],"d":["","Http Accept. Used to specify the Http Accept header in …","Base directory for the <code>crate::HttpClient</code>. The default …","","","","","","Configuration options used throughout this crate via macro.","","Content to be sent in a <code>crate::http_client_request</code>.","The contents of the specified path will be sent to the …","","Whether to print debugging information. Used to configure …","EventHandler Read Slab count. Used to configure http …","Full chain cert file to trust for an …","","","","","","","","","Http Header name/value pair. Used to add an http header to …","Host to connect to. Used for <code>crate::http_connection</code>.","Eventhandler housekeeping frequency. Used to configure …","","","","","","","","","","","","","","","","","","","","","An HttpInstance.","","For <code>crate::http_connection</code>’s, whether or not to keep the …","For <code>crate::websocket_connection_config</code>’s whether or not …","MaxEvents for EventHandler. Used to configure http client …","Max Events In for EventHandler. Used to configure http …","The maximum handles per thread. Used to configure the http …","Maximum headers length. Used to configure http client in …","HttpMethod used in <code>crate::http_client_request</code>.","EventHandler Nhandles queue size. Used to configure http …","","","","","","","","","","","Port to connect to. Used for <code>crate::http_connection</code>.","Private key file.","For <code>crate::websocket_connection_config</code>’s the list of …","Http client’s own slab count. Used to configure http …","EventHandler SyncChannel size. Used to configure http …","","","Number of threads. Used in <code>crate::http_client_init</code>.","Timeout in milliseconds for <code>crate::http_client_request</code>. …","","Whether to use TLS for a connection. Used for …","","","Specify tls configuration files.","","","Uri. Used to specify the uri in <code>crate::http_client_request</code>.","Url. Used to specify the url in <code>crate::http_client_request</code>.","Http User-Agent. Used to specify the User-Agent header in …","HttpVersion used in <code>crate::http_client_request</code>.","","","","","","","","","","","","","","","EventHandler WriteQueueSize. Used to configure http client …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[25,32,32,25,0,21,19,25,0,0,32,32,19,32,32,32,19,19,20,20,0,0,0,0,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,21,32,32,32,32,32,32,32,32,19,20,25,19,19,19,25,30,0,25,32,32,32,32,32,19,25,32,32,30,32,0,0,32,19,20,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,19,20,21,22,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,3,14,5,31,31,15,15,9,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,15,68,68,68,68,68,15,31,31,31,29,33,19,20,21,22,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,19,20,21,22,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,13,35,27,36,10,18,5,3,14,3,14,5,36,15,10,15,9,17,22,31,15,9,12,14,17,34,31,44,49,3,36,10,18,3,36,10,18,3,36,10,18,3,36,10,18,22,22,19,20,21,25,26,31,31,31,15,9,17,9,17,9,17,9,17,9,17,9,17,9,17,9,17,9,17,5,19,19,20,20,21,22,5,56,24,25,26,28,29,30,31,32,33,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,3,14,12,34,3,5,5,5,5,3,36,5,14,5,12,34,0,0,0,0,0,0,0,28,29,15,5,5,69,70,31,15,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,3,36,10,18,5,3,14,31,34,15,15,9,15,3,5,14,15,26,24,23,5,24,34,26,31,12,34,29,33,34,5,24,5,5,23,3,14,3,14,15,5,5,10,13,35,27,27,15,15,9,16,22,22,16,36,16,10,18,69,70,3,14,12,34,19,20,21,22,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,26,26,26,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,5,3,14,3,36,5,14,63,68,69,70,44,19,20,21,22,5,56,23,24,25,26,27,28,29,30,31,15,9,12,14,32,33,17,34,49,0,0,0,0,0,31,31,0],"f":"``````````````````````````````````````````````````````````````````````````````````````````````````````{{cb}d{}}00000000000000000000{fh}`{j{{A`{ln}}}}`````{ce{}{}}000000000000000000000000000000000000000000000000000000000`{Ab{{A`{{Af{Ad}}n}}}}{{Ah{Af{Ad}}}{{A`{{Af{Aj}}n}}}}{Al{{A`{{Af{f}}n}}}}{An{{A`{{Af{B`}}n}}}}{Bb{{A`{{Af{Bd}}n}}}}``````{BfBf}{BhBh}{BjBj}{BlBl}{BnBn}{C`C`}{CbCb}{CdCd}{CfCf}{ChCh}{CjCj}{ClCl}{CnCn}{AnAn}{AbAb}{AhAh}{AlAl}{D`D`}{DbDb}{BbBb}{DdDd}{{ce}d{}{}}00000000000000000000{Aj{{A`{dn}}}}{Df{{A`{dn}}}}{Cf{{A`{dn}}}}{Dh{{A`{Djn}}}}{AdAb}{{BdDdDl}{{A`{{Af{Df}}n}}}}{j{{A`{Bjn}}}}{f{{Eb{{E`{Dn}}}}}}`{f{{Eb{h}}}}`{jEd}{Dh{{A`{Bnn}}}}`{AdEf}```{{}Bl}{{}Cn}{{}An}{{}Ab}{{}Ah}{{}Al}{{}Bb}{{}Dd}`{Eh{{F`{{En{{El{Ej{Af{Ad}}}}}}}}}}{Fb{{F`{{En{{El{Ej{Af{Bd}}}}}}}}}}{{{Af{f}}}{{A`{{Af{c}}{Fd{{Af{f}}}}}}}Ff}{{{Af{Dh}}}{{A`{{Af{c}}{Fd{{Af{Dh}}}}}}}Ff}{{{Af{Ad}}}{{A`{{Af{c}}{Fd{{Af{Ad}}}}}}}Ff}{{{Af{Bd}}}{{A`{{Af{c}}{Fd{{Af{Bd}}}}}}}Ff}{f{{A`{cFh}}}Ff}{Dh{{A`{cFh}}}Ff}{Ad{{A`{cFh}}}Ff}{Bd{{A`{cFh}}}Ff}{{{Fj{f}}}{{A`{{Fj{c}}{Fd{{Fj{f}}}}}}}Ff}{{{Fj{Dh}}}{{A`{{Fj{c}}{Fd{{Fj{Dh}}}}}}}Ff}{{{Fj{Ad}}}{{A`{{Fj{c}}{Fd{{Fj{Ad}}}}}}}Ff}{{{Fj{Bd}}}{{A`{{Fj{c}}{Fd{{Fj{Bd}}}}}}}Ff}7654``{{BfBf}l}{{BhBh}l}{{BjBj}l}{{CbCb}l}{{CdCd}l}``````````````````````{j{{A`{hn}}}}{{BfFl}Fn}0{{BhFl}Fn}0{{BjFl}Fn}{{BlFl}Fn}{{jFl}Fn}{{G`Fl}Fn}{{C`Fl}Fn}{{CbFl}Fn}{{CdFl}Fn}{{ChFl}Fn}{{CjFl}Fn}{{ClFl}Fn}{{CnFl}Fn}{{D`Fl}Fn}{{DbFl}Fn}{cc{}}0000000000000000000000000000{f{{Eb{h}}}}```{fGb}{j{{A`{ln}}}}{j{{A`{Edn}}}}{{jEd}{{A`{hn}}}}0{f{{E`{{Gd{hh}}}}}}{Dh{{A`{{E`{{Gd{hh}}}}n}}}}{j{{A`{{E`{{Gd{hh}}}}n}}}}`{j{{A`{hn}}}}````````````00{Ab{{A`{dn}}}}{Bb{{A`{dn}}}}``{ce{}{}}0000000000000000000000000000{{{Af{c}}}{{Af{Gf}}}{}}0000000000000000000000000000{{{F`{c}}}{{F`{Gf}}}{}}0000000000000000000000000000{{{Fj{c}}}{{Fj{Gf}}}{}}0000000000000000000000000000{fl}{Dhl}{Adl}{Bdl}{j{{A`{ln}}}}4```````{fBf}{j{{A`{Bfn}}}}````{{}Bn}>`````````>`{j{{A`{Edn}}}}0{{Bn{Gh{Dn}}}{{A`{EdGj}}}}{f{{Eb{h}}}}`0``{j{{A`{hn}}}}0{{Ad{Af{f}}Gl}{{A`{dn}}}}{{Aj{Af{f}}Gl}{{A`{dn}}}}{{DfCd}{{A`{dn}}}}{{CfCd}{{A`{dn}}}}0```{B`{{A`{dn}}}}``{B`{{A`{Gnn}}}}{Dh{{A`{hn}}}}2{Ad{{A`{dn}}}}{Bd{{A`{dn}}}}{{}{{A`{dn}}}}0{fH`}```{ce{}{}}00000000000000000000{c{{A`{e}}}{}{}}0000000000000{Cb{{A`{Cdn}}}}1{{{Hb{Dn}}}{{A`{Cdn}}}}{{{Gh{Dn}}}{{A`{Cdn}}}}{Hd{{A`{Cdn}}}}4444444444444444444444444444444444444444444{cHf{}}0000000000000000000000000000{cHd{}}0000000000000000000000000000{jEd}{fh}`{fBh}{Dh{{A`{Bhn}}}}{j{{A`{Bhn}}}}`<<<<<<<<<<<<<<<<<<<<<<<<<<<<<````````","c":[],"p":[[5,"Private",761],[1,"unit"],[10,"HttpRequest",0],[5,"String",762],[5,"HttpHeaders",0],[1,"bool"],[5,"Error",763],[6,"Result",764],[5,"HttpClientConfig",0],[10,"HttpClient",0],[5,"Box",765],[5,"HttpConnectionConfig",0],[10,"HttpConnection",0],[5,"HttpRequestConfig",0],[5,"HttpConfig",0],[10,"HttpServer",0],[5,"WebSocketClientConfig",0],[10,"WebSocketClient",0],[6,"HttpMethod",0],[6,"HttpVersion",0],[6,"ConnectionType",0],[5,"HttpHeader",0],[5,"HttpContentReader",0],[5,"WebSocketData",0],[6,"WebSocketMessageType",0],[5,"WebSocketMessage",0],[5,"WebSocketHandle",0],[5,"PlainConfig",0],[5,"TlsConfig",0],[6,"HttpInstanceType",0],[5,"HttpInstance",0],[6,"ConfigOption",0],[5,"TlsConfigFiles",0],[5,"WebSocketConnectionConfig",0],[10,"WebSocketConnection",0],[10,"HttpResponse",0],[1,"u16"],[8,"WebSocketHandler",0],[1,"u8"],[5,"Vec",766],[6,"Option",767],[1,"usize"],[5,"EventHandlerController",768],[5,"HTTP_CLIENT_CONTAINER",0],[5,"ThreadId",769],[5,"HashMap",770],[5,"RwLock",771],[5,"Arc",772],[5,"WEBSOCKET_CLIENT_CONTAINER",0],[5,"DowncastError",773],[10,"Any",773],[5,"TypeMismatch",773],[5,"Rc",774],[5,"Formatter",775],[8,"Result",775],[5,"HttpConnectionData",0],[1,"u128"],[1,"tuple"],[10,"Any",776],[1,"slice"],[5,"Error",777],[8,"HttpHandler",0],[5,"HttpStats",0],[1,"u64"],[1,"array"],[1,"str"],[5,"TypeId",776],[5,"Builder",0],[5,"HttpClientContainer",0],[5,"WebSocketClientContainer",0]],"b":[[318,"impl-Display-for-%26HttpMethod"],[319,"impl-Debug-for-HttpMethod"],[320,"impl-Debug-for-HttpVersion"],[321,"impl-Display-for-%26HttpVersion"],[611,"impl-TryFrom%3CWebSocketMessageType%3E-for-WebSocketMessage"],[613,"impl-TryFrom%3C%26%5Bu8;+N%5D%3E-for-WebSocketMessage"],[614,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-WebSocketMessage"],[615,"impl-TryFrom%3C%26str%3E-for-WebSocketMessage"]]}],\
["bmw_int",{"doc":"The BMW Integration crate","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["bmw_log",{"doc":"The BMW Logging Crate","t":"PPPPPKFGGPPPPNNNNNNNNNNMQQQNNQQQQQQNNNNMQQQQMNNNNNNNNNNNNMMQMQQMQMMMQNNQQQNNNNNNNNNNNNQQNNNQQQ","n":["All","Debug","Error","Fatal","Info","Log","LogBuilder","LogLevel","LoggingType","Plain","Standard","Trace","Warn","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_log","clone","clone_into","close","debug","debug_all","debug_plain","eq","eq","error","error_all","error_plain","fatal","fatal_all","fatal_plain","fmt","from","from","from","get_config_option","get_log_option","info","info_all","info_plain","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","log","log_all","log_init","log_plain","log_rotate","logger","need_rotate","need_rotate","rotate","set_config_option","set_log_level","set_log_option","to_owned","to_string","trace","trace_all","trace_plain","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_name","type_name","type_name","u64","usize","vzip","vzip","vzip","warn","warn_all","warn_plain"],"q":[[0,"bmw_log"],[94,"dyn_clone::sealed"],[95,"bmw_conf::types"],[96,"alloc::vec"],[97,"alloc::boxed"],[98,"bmw_err::types"],[99,"core::result"],[100,"core::fmt"],[101,"core::fmt"],[102,"alloc::sync"],[103,"alloc::rc"],[104,"alloc::string"],[105,"core::any"]],"d":["","Debugging information","Error that the user must be aware of","Fatal error that usually causes the application to be …","Standard information that is usually displayed to the user …","The main trait implemented by the bmw_log crate. Some …","Builder struct used to build <code>crate::Log</code> implementations.","Standard 6 log levels.","Internal enum used by the global logging macros like …","","","Very fine grained logging information that should not …","Warning of something that the user should be aware of, …","","","","","","","","Build a logger based based on the specified configuration. …","","","Close the log file","Set <code>crate::LogLevel</code> to <code>crate::LogLevel::Debug</code> or log at …","Same as <code>debug</code> except that the <code>crate::Log::log_all</code> function …","Same as <code>debug</code> except that the <code>crate::Log::log_plain</code> …","","","Set <code>crate::LogLevel</code> to <code>crate::LogLevel::Error</code> or log at …","Same as <code>error</code> except that the <code>crate::Log::log_all</code> function …","Same as <code>error</code> except that the <code>crate::Log::log_plain</code> …","Set <code>crate::LogLevel</code> to <code>crate::LogLevel::Fatal</code> or log at …","Same as <code>fatal</code> except that the <code>crate::Log::log_all</code> function …","Same as <code>fatal</code> except that the <code>crate::Log::log_plain</code> …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the specified ConfigOptionName. These names correspond …","Get the current value of the specified log option for the …","Set <code>crate::LogLevel</code> to <code>crate::LogLevel::Info</code> or log at the …","Same as <code>info</code> except that the <code>crate::Log::log_all</code> function …","Same as <code>info</code> except that the <code>crate::Log::log_plain</code> …","Initialize the log. The function does any needed i/o …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Log data to disk/stdout. Note that even though a log level …","The same as <code>Log::log</code>, but this function will always log to …","Initialize the global log. This macro takes a list of …","Log without any of the header details. As seen in the …","Rotate the global log. See <code>crate::Log::rotate</code> for full …","This macro builds a <code>crate::Log</code> implementation and returns …","This function checks if a log rotation is needed. It …","See if the global log needs to be rotated. See …","Do a log rotation. The name of the file rotated is …","Set the specified ConfigOption. It may seem a little …","Sets the log level threshold. Logging only occurs if the …","Configure the global log with the specified ConfigOption. …","","","Set <code>crate::LogLevel</code> to <code>crate::LogLevel::Trace</code> or log at …","Same as <code>trace</code> except that the <code>crate::Log::log_all</code> function …","Same as <code>trace</code> except that the <code>crate::Log::log_plain</code> …","","","","","","","","","","","","","a u64 conversion macro","a usize conversion macro","","","","Set <code>crate::LogLevel</code> to <code>crate::LogLevel::Warn</code> or log at the …","Same as <code>warn</code> except that the <code>crate::Log::log_all</code> function …","Same as <code>warn</code> except that the <code>crate::Log::log_plain</code> …"],"i":[10,9,9,9,9,0,0,0,0,10,10,9,9,9,21,10,9,21,10,9,21,9,9,5,0,0,0,10,9,0,0,0,0,0,0,9,21,10,9,5,0,0,0,0,5,21,10,9,21,10,9,21,10,9,21,10,9,5,5,0,5,0,0,5,0,5,5,5,0,9,9,0,0,0,21,10,9,21,10,9,21,10,9,21,10,9,0,0,21,10,9,0,0,0],"f":"`````````````{{cb}d{}}{ce{}{}}00000{{{h{f}}}{{A`{{l{j}}n}}}}{AbAb}{{ce}d{}{}}{j{{A`{dn}}}}```{{AdAd}Af}{{AbAb}Af}``````{{AbAh}{{A`{dAj}}}}{cc{}}00{{jAl}{{A`{fn}}}}````5999{{{l{c}}}{{l{An}}}{}}00{{{B`{c}}}{{B`{An}}}{}}00{{{Bb{c}}}{{Bb{An}}}{}}00{{jAbBd}{{A`{dn}}}}0`0``{j{{A`{Afn}}}}`:{{jf}{{A`{dn}}}}{{jAb}d}`{ce{}{}}{cBf{}}```{c{{A`{e}}}{}{}}00000{cBh{}}00{cBd{}}00``444```","c":[],"p":[[5,"Private",94],[1,"unit"],[6,"ConfigOption",95],[5,"Vec",96],[10,"Log",0],[5,"Box",97],[5,"Error",98],[6,"Result",99],[6,"LogLevel",0],[6,"LoggingType",0],[1,"bool"],[5,"Formatter",100],[5,"Error",100],[6,"ConfigOptionName",95],[10,"Any",101],[5,"Arc",102],[5,"Rc",103],[1,"str"],[5,"String",104],[5,"TypeId",101],[5,"LogBuilder",0]],"b":[]}],\
["bmw_rustlet",{"doc":"","t":"FFFKKKNMNNNNMNNNNNNNNMMNNMNNNNMMMONQNNNNNNNNNNNNOMMMMMMMMNQNQQOQQQQMMMNNQNNNNNNNNNNNNNMNNNQQQM","n":["RustletConfig","RustletContainer","RustletContainerConfig","RustletRequest","RustletResponse","WebSocketRequest","__clone_box","add_header","add_rustlet","add_rustlet_mapping","add_websocket","add_websocket_mapping","async_complete","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","content_reader","data","default","default","flush","fmt","from","from","from","handle","header_host","headers","http_config","init","instance","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","main_log_file","message","method","path","path","protocol","query","query","redirect","request","request","response","response","rustlet","rustlet_config","rustlet_init","rustlet_mapping","rustlet_start","rustlet_stop","set_async","set_connection_close","set_content_type","start","stop","tls_config","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_name","type_name","type_name","version","vzip","vzip","vzip","websocket","websocket_mapping","websocket_request","write"],"q":[[0,"bmw_rustlet"],[94,"dyn_clone::sealed"],[95,"bmw_err::types"],[96,"core::result"],[97,"core::ops::function"],[98,"alloc::boxed"],[99,"core::pin"],[100,"alloc::vec"],[101,"bmw_http::types"],[102,"bmw_http::types"],[103,"core::fmt"],[104,"core::any"],[105,"alloc::sync"],[106,"alloc::rc"],[107,"bmw_http::types"],[108,"core::any"]],"d":["","","","The main trait used for processing requests in a rustlet. …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Three params: name, uri, [protocol list]","Returns <code>crate::WebSocketRequest</code>.",""],"i":[0,0,0,0,0,0,12,3,7,7,7,7,3,17,7,12,17,7,12,12,12,13,15,17,12,3,12,17,7,12,15,13,13,17,7,0,17,7,12,17,7,12,17,7,12,17,7,12,12,15,13,13,15,15,13,15,3,7,0,7,0,0,17,0,0,0,0,3,3,3,7,7,0,12,17,7,12,17,7,12,17,7,12,17,7,12,13,17,7,12,0,0,0,3],"f":"``````{{cb}d{}}{{fhh}{{l{dj}}}}{{nh{Ad{{Ab{A`}}}}}{{l{dj}}}}{{nhh}{{l{dj}}}}1{{nhh{Af{h}}}{{l{dj}}}}{f{{l{dj}}}}{ce{}{}}00000{AhAh}{{ce}d{}{}}{AjAl}{AnB`}{{}Bb}{{}Ah}7{{AhBd}Bf}{cc{}}00{AnBh}{AjBj}{Aj{{Af{{Bl{BjBj}}}}}}`{Bb{{l{dj}}}}`<<<{{{Ab{c}}}{{Ab{Bn}}}{}}00{{{C`{c}}}{{C`{Bn}}}{}}00{{{Cb{c}}}{{Cb{Bn}}}{}}00`{AnCd}{AjCf}7{AnBj}{An{{Ch{Bj}}}}91{{fh}{{l{dj}}}}{n{{l{{Ab{Aj}}j}}}}`{n{{l{{Ab{f}}j}}}}```````{f{{l{dj}}}}03{n{{l{dj}}}}0`{ce{}{}}{c{{l{e}}}{}{}}00000{cCj{}}00{ch{}}00{AjCl}444```{{f{D`{Cn}}}{{l{dj}}}}","c":[],"p":[[5,"Private",94],[1,"unit"],[10,"RustletResponse",0],[1,"str"],[5,"Error",95],[6,"Result",96],[5,"RustletContainer",0],[10,"Fn",97],[5,"Box",98],[5,"Pin",99],[5,"Vec",100],[5,"RustletContainerConfig",0],[10,"RustletRequest",0],[5,"HttpContentReader",101],[10,"WebSocketRequest",0],[5,"WebSocketData",101],[5,"RustletConfig",0],[5,"Formatter",102],[8,"Result",102],[5,"WebSocketHandle",101],[5,"String",103],[1,"tuple"],[10,"Any",104],[5,"Arc",105],[5,"Rc",106],[5,"WebSocketMessage",101],[6,"HttpMethod",101],[6,"Option",107],[5,"TypeId",104],[6,"HttpVersion",101],[1,"u8"],[1,"slice"]],"b":[]}],\
["bmw_ser",{"doc":"The BMW Serialization crate","t":"FFKKKNNNNHMNNNNNNNNNNNNMNNMNMNMNMNMNMNMNMNMNMNMNMNHNNNNNNNNNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNN","n":["BinReader","BinWriter","Reader","Serializable","Writer","borrow","borrow","borrow_mut","borrow_mut","deserialize","expect_u8","expect_u8","from","from","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","new","new","read","read_empty_bytes","read_empty_bytes","read_fixed_bytes","read_fixed_bytes","read_i128","read_i128","read_i16","read_i16","read_i32","read_i32","read_i64","read_i64","read_i8","read_i8","read_u128","read_u128","read_u16","read_u16","read_u32","read_u32","read_u64","read_u64","read_u8","read_u8","read_usize","read_usize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","vzip","vzip","write","write_bytes","write_bytes","write_empty_bytes","write_empty_bytes","write_fixed_bytes","write_fixed_bytes","write_i128","write_i128","write_i16","write_i16","write_i32","write_i32","write_i64","write_i64","write_i8","write_i8","write_u128","write_u128","write_u16","write_u16","write_u32","write_u32","write_u64","write_u64","write_u8","write_u8","write_usize","write_usize"],"q":[[0,"bmw_ser"],[90,"bmw_err::types"],[91,"core::result"],[92,"std::io"],[93,"alloc::boxed"],[94,"core::any"],[95,"alloc::sync"],[96,"alloc::rc"],[97,"std::io"]],"d":["Utility wrapper for an underlying byte Reader. Defines …","Utility wrapper for an underlying byte Writer. Defines …","Reader trait used for deserializing data.","This is the trait used by all data structures to serialize …","Writer trait used for serializing data.","","","","","Deserializes a Serializable from any std::io::Read …","expect a specific byte, otherwise return an error","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Wraps a standard Write in a new BinWriter","Constructor for a new BinReader for the provided source","read data from the reader and build the underlying type …","Read bytes, expect them all to be 0u8. Otherwise, reutrn …","Read bytes, expect them all to be 0u8. Otherwise, reutrn …","read a fixed length of bytes from the reader store them in …","","read an i128 from the reader and return the value","","read an i16 from the reader and return the value","","read an i32 from the reader and return the value","","read an i64 from the reader and return the value","","read an i8 from the reader and return the value","","read a u128 from the reader and return the value","","read a u16 from the reader and return the value","","read a u32 from the reader and return the value","","read a u64 from the reader and return the value","","read a u8 from the reader and return the value","","read usize from the Reader.","","Serializes a Serializable into any std::io::Write …","","","","","","","","","","","write data to the writer representing the underlying type.","write <code>bytes</code> to the stream and specify the length so that …","write <code>bytes</code> to the stream and specify the length so that …","write <code>length</code> empty (0u8) bytes to a stream.","write <code>length</code> empty (0u8) bytes to a stream.","write <code>bytes</code> to the stream","","write an i128 to the stream","write an i128 to the stream","write an i16 to the stream","write an i16 to the stream","write an i32 to the stream","write an i32 to the stream","write an i64 to the stream","write an i64 to the stream","write an i8 to the stream","write an i8 to the stream","write a u128 to the stream","write a u128 to the stream","write a u16 to the stream","write a u16 to the stream","write a u32 to the stream","write a u32 to the stream","write a u64 to the stream","write a u64 to the stream","write a u8 to the stream","write a u8 to the stream","write a usize to the stream","write a usize to the stream"],"i":[0,0,0,0,0,13,7,13,7,0,5,7,13,7,13,7,13,7,7,13,7,13,7,4,5,5,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,0,13,7,13,7,13,7,13,7,13,7,4,28,28,28,28,28,13,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":"`````{ce{}{}}000{c{{d{eb}}}fh}{{jl}{{d{lb}}}}{{{n{c}}l}{{d{lb}}}f}{cc{}}044{{{A`{c}}}{{A`{Ab}}}{}}0{{{Ad{c}}}{{Ad{Ab}}}{}}{{{Af{c}}}{{Af{Ab}}}{}}0{AhAj}{c{{n{c}}}f}{c{{d{hb}}}j}{{jAl}{{d{Anb}}}}0{{j{B`{l}}}{{d{Anb}}}}{{{n{c}}{B`{l}}}{{d{Anb}}}f}{j{{d{Bbb}}}}{{{n{c}}}{{d{Bbb}}}f}{j{{d{Bdb}}}}{{{n{c}}}{{d{Bdb}}}f}{j{{d{Bfb}}}}{{{n{c}}}{{d{Bfb}}}f}{j{{d{Bhb}}}}{{{n{c}}}{{d{Bhb}}}f}{j{{d{Bjb}}}}{{{n{c}}}{{d{Bjb}}}f}{j{{d{Blb}}}}{{{n{c}}}{{d{Blb}}}f}{j{{d{Bnb}}}}{{{n{c}}}{{d{Bnb}}}f}{j{{d{C`b}}}}{{{n{c}}}{{d{C`b}}}f}{j{{d{Cbb}}}}{{{n{c}}}{{d{Cbb}}}f}{j{{d{lb}}}}{{{n{c}}}{{d{lb}}}f}{j{{d{Alb}}}}{{{n{c}}}{{d{Alb}}}f}{{Ahc}{{d{Anb}}}h}{c{{d{e}}}{}{}}000{cCd{}}0{cCf{}}0{ce{}{}}0{{hc}{{d{Anb}}}Ch}{{Chc}{{d{Anb}}}{{Cj{{B`{l}}}}}}0{{ChAl}{{d{Anb}}}}01{{Ajc}{{d{Anb}}}{{Cj{{B`{l}}}}}}{{ChBb}{{d{Anb}}}}0{{ChBd}{{d{Anb}}}}0{{ChBf}{{d{Anb}}}}0{{ChBh}{{d{Anb}}}}0{{ChBj}{{d{Anb}}}}0{{ChBl}{{d{Anb}}}}0{{ChBn}{{d{Anb}}}}0{{ChC`}{{d{Anb}}}}0{{ChCb}{{d{Anb}}}}0{{Chl}{{d{Anb}}}}0;;","c":[],"p":[[5,"Error",90],[6,"Result",91],[10,"Read",92],[10,"Serializable",0],[10,"Reader",0],[1,"u8"],[5,"BinReader",0],[5,"Box",93],[10,"Any",94],[5,"Arc",95],[5,"Rc",96],[10,"Write",92],[5,"BinWriter",0],[1,"usize"],[1,"unit"],[1,"slice"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[5,"TypeId",94],[1,"str"],[10,"Writer",0],[10,"AsRef",97]],"b":[]}],\
["bmw_test",{"doc":"The BMW Test Utility crate","t":"FKNNNMQNNNNNMMQNNNNN","n":["Builder","TestInfo","borrow","borrow_mut","build_test_info","directory","free_port","from","into","into_any","into_any_arc","into_any_rc","port","sync_channel","test_info","try_from","try_into","type_id","type_name","vzip"],"q":[[0,"bmw_test"],[20,"bmw_err::types"],[21,"core::result"],[22,"alloc::string"],[23,"alloc::boxed"],[24,"core::any"],[25,"alloc::sync"],[26,"alloc::rc"],[27,"std::sync::mpsc"],[28,"std::sync::mpsc"]],"d":["A builder that is used to construct TestInfo …","This trait defines the data which a test can use. A test …","","","Build a <code>crate::TestInfo</code> impl. This should generally be …","Return a directory that can be used by the test. It is …","Returns a free port that is not used at the time of the …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Return a port that can be used by the test.","Return a (std::sync::mpsc::SyncSender&lt;()&gt;, …","Macro to setup a test directory based on the function …","","","","",""],"i":[0,0,17,17,17,2,0,17,17,17,17,17,2,2,0,17,17,17,17,17],"f":"``{ce{}{}}0{b{{h{{`{d}}f}}}}{dj}`{cc{}}3{{{l{c}}}{{l{n}}}{}}{{{A`{c}}}{{A`{n}}}{}}{{{Ab{c}}}{{Ab{n}}}{}}{dAd}{d{{Al{{Ah{Af}}{Aj{Af}}}}}}`{c{{h{e}}}{}{}}0{cAn{}}{cB`{}};","c":[],"p":[[1,"bool"],[10,"TestInfo",0],[5,"Error",20],[6,"Result",21],[5,"String",22],[5,"Box",23],[10,"Any",24],[5,"Arc",25],[5,"Rc",26],[1,"u16"],[1,"unit"],[5,"SyncSender",27],[5,"Receiver",27],[1,"tuple"],[5,"TypeId",24],[1,"str"],[5,"Builder",0]],"b":[]}],\
["bmw_util",{"doc":"","t":"FFPKFKFKFKKFPPFGKFFKFKFFFFKKKFFFFNNNNNNNNNMQQQQQNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNMMMNMNNNNNNNNNNNNNNNNNNMMNMNMNNNNNMNNNNNMNQMNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNNMMNNMNQNNQQQQQQQQMNNNNNNNMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMMMNNMNMMNNQQQQQQQQHMMMMNNNNNNNNNNNNNNNNNNQMMNNMNMMNNQQQQHHHHMMNNNNNNNNNNNNNNNNNNMMMMMQMQQNNMMMMMNNNNQMOMOMMHHHHMNMNQQQQMNMNMNNQMQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHNNNNNNNNNNNNNNNNNNNMMQMNNNNN","n":["Array","ArrayList","Err","Hashset","HashsetIterator","Hashtable","HashtableIterator","List","ListIterator","Lock","LockBox","Match","Ok","Panic","Pattern","PoolResult","Queue","RwLockReadGuardWrapper","RwLockWriteGuardWrapper","SearchTrie","Slab","SlabAllocator","SlabAllocatorConfig","SlabMut","SlabReader","SlabWriter","SortableList","Stack","ThreadPool","ThreadPoolExecutor","ThreadPoolHandle","ThreadPoolStopper","UtilBuilder","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","allocate","array","array_list","array_list_box","array_list_sync","array_list_sync_box","as_mut","as_slice","block_on","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bring_to_front","build_array","build_array_list","build_array_list_box","build_array_list_sync","build_array_list_sync_box","build_hashset","build_hashset_box","build_hashset_sync","build_hashset_sync_box","build_hashtable","build_hashtable_box","build_hashtable_sync","build_hashtable_sync_box","build_list","build_list_box","build_list_sync","build_list_sync_box","build_lock","build_lock_box","build_match","build_pattern","build_queue","build_queue_box","build_queue_sync","build_queue_sync_box","build_search_trie","build_search_trie_box","build_slabs","build_slabs_unsafe","build_stack","build_stack_box","build_stack_sync","build_stack_sync_box","build_sync_slabs","build_thread_pool","canonicalize_base_path","cjk_compat_variants","cjk_compat_variants","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","danger_to_usize","default","delete_head","delete_head","dequeue","dequeue","do_read_exact","drop","drop","end","enqueue","enqueue","eq","eq","eq","eq","execute","execute","execute","executor","expect_u8","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","free_count","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get_mut","get_mut","global_slab_allocator","guard","guard","hashset","hashset_box","hashset_sync","hashset_sync_box","hashtable","hashtable_box","hashtable_sync","hashtable_sync_box","id","id","id","id","id","id","index","index_mut","init","inner","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_iter","into_iter","into_iter","is_case_sensitive","is_err","is_init","is_termination_pattern","iter","iter","iter","iter","iter","iter_rev","iter_rev","length","length","length","length","list","list_append","list_box","list_eq","list_sync","list_sync_box","lock","lock_box","lock_box_from_usize","max_entries","max_entries","max_load_factor","max_load_factor","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","new","next","next","next","nfc","nfc","nfd","nfd","nfkc","nfkc","nfkd","nfkd","pattern","peek","peek","peek","peek","pop","pop","push","push","push","push","queue","queue_box","queue_sync","queue_sync_box","random_bytes","random_u128","random_u32","random_u64","raw_read","raw_write","read","read","read","read","read_exact","read_fixed_bytes","read_i128","read_i16","read_i32","read_i64","read_i8","read_u128","read_u16","read_u32","read_u64","read_u8","read_usize","regex","remove","remove","remove_oldest","rlock","rlock","rlock","rlock_ignore_poison","search_trie","search_trie_box","seek","seek","set_on_panic","size","size","size","size","size","size","skip_bytes","skip_bytes","slab_allocator","slab_count","slab_count","slab_size","slab_size","slabs","slabs","slice_to_u128","slice_to_u32","slice_to_u64","slice_to_usize","sort","sort","sort_unstable","sort_unstable","stack","stack_box","stack_sync","stack_sync_box","start","start","stop","stop","stopper","stream_safe","stream_safe","thread_pool","tmatch","tmatch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","u128_to_slice","u32_to_slice","u64_to_slice","usize_to_slice","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wlock","wlock","wlock","wlock_ignore_poison","write","write","write","write","write_fixed_bytes"],"q":[[0,"bmw_util"],[560,"dyn_clone::sealed"],[561,"bmw_err::types"],[562,"core::result"],[563,"core::clone"],[564,"bmw_ser::types"],[565,"core::fmt"],[566,"core::cmp"],[567,"alloc::boxed"],[568,"core::marker"],[569,"core::marker"],[570,"alloc::vec"],[571,"core::hash"],[572,"core::cell"],[573,"core::any"],[574,"core::ops::function"],[575,"core::marker"],[576,"unicode_normalization::replace"],[577,"core::option"],[578,"core::future::future"],[579,"std::sync::mpsc"],[580,"core::fmt"],[581,"std::sync::rwlock"],[582,"alloc::rc"],[583,"core::iter::traits::iterator"],[584,"unicode_normalization::recompose"],[585,"unicode_normalization::decompose"],[586,"bmw_ser::types"],[587,"core::any"]],"d":["Arrays for use with other functions in this library. An …","ArrayList data structure. Arraylist implements List and …","","","An iterator for the <code>crate::Hashset</code>.","","An iterator for the <code>crate::Hashtable</code>.","The list trait is implemented by both <code>crate::list</code> and …","An iterator for <code>crate::list</code>.","","","","","","","","","Wrapper around the <code>std::sync::RwLockReadGuard</code>.","Wrapper around the <code>std::sync::RwLockWriteGuard</code>.","","Struct that is used as a immutable reference to data in a …","","","Struct that is used as a mutable reference to data in a …","Utility to read from slabs using the <code>bmw_ser::Reader</code> trait.","Utility to write to slabs using the <code>bmw_ser::Writer</code> trait.","The sortable list allows for efficient sorting of both the …","","","Struct that can be used to execute tasks in the thread …","This handle is returned by <code>crate::ThreadPool::execute</code>. It …","Struct that can be used to stop the thread pool. Note the …","","","","","","","","","","","","The <code>crate::array!</code> macro builds an <code>crate::Array</code>.","The <code>crate::array_list</code> macro builds an <code>crate::ArrayList</code> in …","The <code>boxed</code> form of <code>crate::array_list</code>. This macro builds an …","The <code>sync</code> form of <code>crate::array_list</code>. This macro builds an …","The <code>sync_boxed</code> form of <code>crate::array_list</code>. This macro …","","","","This macro causes the current thread to block until the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bring the entry to the front of the list for deletion …","","","","","","","Build a <code>crate::Hashset</code> based on the specified <code>config</code> and …","","Build a synchronous <code>crate::Hashset</code> based on the specified …","","Build a <code>crate::Hashtable</code> based on the specified <code>config</code> and …","","Build a synchronous <code>crate::Hashtable</code> based on the …","","Build a <code>crate::List</code> based on the specified <code>config</code> and <code>slabs</code>…","","Build a synchronous <code>crate::List</code> based on the specified …","Build a <code>crate::Lock</code>.","Build a <code>crate::LockBox</code>.","Build a match struct.","Build a pattern based on the specified <code>regex</code>. If …","Build an <code>crate::Queue</code> based on the specified <code>size</code> and …","Build an <code>crate::Queue</code> based on the specified <code>size</code> and …","Build an <code>crate::Queue</code> based on the specified <code>size</code> and …","Build an <code>crate::Queue</code> based on the specified <code>size</code> and …","Builds a search trie based on the specified list of …","Same as <code>crate::UtilBuilder::build_search_trie</code> except that …","Build a slab allocator in a Box.","Build a slab allocator on the heap in an …","Build an <code>crate::Stack</code> based on the specified <code>size</code> and …","Build a <code>crate::Stack</code> based on the specified <code>size</code> and …","sync version of <code>crate::UtilBuilder::build_stack</code>.","sync box version of <code>crate::UtilBuilder::build_stack</code>.","sync version of <code>crate::UtilBuilder::build_slabs</code>.","Build a <code>crate::ThreadPool</code> based on the specified …","Utility to canonicalize a path relative to a base …","","","clear all items from the list","Clear all items, reinitialized the entry array, and free …","Clear all items, reinitialized the entry array, and free …","","Clone this <code>crate::Lock</code>.","","","","","","","","","","","","","","","","","","","If <code>key</code> is present this function returns true, otherwise …","consume the inner Arc and return a usize value. This …","","delete the head of the list","","Dequeue a value. If the queue is Empty return None","","","","","","Enqueue a value","","","","","","Execute a task in the thread pool. This task will run to …","","This macro executes a task in the specified …","Get the <code>crate::ThreadPoolExecutor</code> for this thread pool.","","","","","","","","","","","","Returns the number of free slabs this <code>crate::SlabAllocator</code> …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the value associated with the specified <code>key</code>.","","get an immutable reference to the data held in this slab.","get a mutable reference to the data held in this slab.","","get a mutable reference to the data held in this slab.","The <code>crate::global_slab_allocator</code> macro initializes the …","Return the RwLockReadGuard associated with this lock.","Return the RwLockWriteGuard associated with this lock.","The <code>crate::hashset</code> macro builds a <code>crate::Hashset</code> with the …","The <code>crate::hashset_box</code> macro is the <code>boxed</code> version of the …","The <code>crate::hashset_sync</code> macro is the <code>sync</code> version of the …","The <code>crate::hashset_sync_box</code> macro is the <code>sync</code> and <code>boxed</code> …","The <code>crate::hashtable</code> macro builds a <code>crate::Hashtable</code> with …","The <code>crate::hashtable_box</code> macro is the <code>boxed</code> version of …","The <code>crate::hashtable_sync</code> macro is the <code>sync</code> version of …","The <code>crate::hashtable_sync_box</code> macro is the <code>sync</code> and <code>boxed</code> …","return the id for this lockbox.","get the id of this slab. Each slab has in an instance of …","get the id of this slab. Each slab in an instance of …","","","","","","Initializes the <code>crate::SlabAllocator</code> with the given <code>config</code>…","return the inner data holder.","Insert a key/value pair into the hashtable.","Insert a key into this hashset.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the slab allocator has been initialized, return true, …","","return an iterator that can iterate through the list","Returns an <code>std::iter::Iterator</code> to iterate through this …","Returns an <code>std::iter::Iterator</code> to iterate through this …","","","return an iterator that can iterate through the list in …","","return the number of items currently in the queue","return the number of items currently in the stack","","","The <code>crate::list</code> macro is used to create implementations of …","Append list2 to list1.","The <code>crate::list_box</code> macro is the <code>boxed</code> version of …","Compares equality of list1 and list2.","The <code>crate::list_sync</code> macro is the <code>sync</code> version of …","The <code>crate::list_sync_box</code> macro is the <code>sync</code> and <code>boxed</code> …","Macro to get a <code>crate::Lock</code>. Internally, the parameter …","The same as <code>crate::lock!</code> except that the value returned is …","Rebuild a <code>crate::LockBox</code> from the <code>usize</code> which is returned …","Returns the maximum entries as configured for this …","Returns the maximum entries as configured for this …","Returns the maximum load factor as configured for this …","Returns the maximum load factor as configured for this …","","","","","","","","","","","","","","","","","","","The pattern macro builds a <code>crate::Pattern</code> which is used by …","peek at the next value in the queue. If the queue is Empty …","peek at the top of the stack","","","pop a value off the top of the stack","","push a value onto the end of the list","push a <code>value</code> onto the stack","","","The <code>crate::queue</code> macro creates a <code>crate::Queue</code> …","The <code>crate::queue_box</code> macro is the <code>boxed</code> version of …","The <code>crate::queue_sync</code> macro is the <code>sync</code> version of …","The <code>crate::queue_sync_box</code> macro is the <code>sync</code> and <code>boxed</code> …","","","","","Get raw data and store it in <code>data</code> with given offset.","Write raw data from <code>data</code> with given offset.","","","","","","","","","","","","","","","","","","","Remove the specified <code>key</code> from the hashtable.","Remove the specified <code>key</code> from this hashset.","Remove the oldest entry in the hashtable.","obtain a read lock and corresponding …","obtain a read lock and corresponding …","macro to call rlock and guard function on a <code>crate::LockBox</code> …","Same as <code>crate::LockBox::rlock</code> except that any poison …","The <code>search_trie</code> macro builds a <code>crate::SearchTrie</code> which can …","The <code>search_trie_box</code> macro is the <code>boxed</code> version of …","go to a particular slab_id/offset within the …","go to a particular slab_id/offset within the …","Set an on panic handler for this thread pool","return the size of the list","Return the size of the hashtable.","Returns the size of this hashset.","Returns the current size of the thread pool which will be …","","","","","The <code>slab_allocator</code> macro initializes a slab allocator with …","Returns the configured <code>slab_count</code> for this …","The number of slabs that this slab allocator can allocate","Returns the configured <code>slab_size</code> for this …","The size, in bytes, of a slab","Gets the slab allocator associated with this Hashtable or …","","Utility to convert an arbitrary length slice (up to 16 …","Utility to convert an arbitrary length slice (up to 8 …","Utility to convert an arbitrary length slice (up to 8 …","Utility to convert an arbitrary length slice (up to 8 …","sort with a stable sorting algorithm","","sort with an unstable sorting algorithm. unstable sort is …","","The <code>crate::stack</code> macro creates a <code>crate::Stack</code> …","The <code>crate::stack_box</code> macro is the <code>boxed</code> version of …","The <code>crate::stack_sync</code> macro is the <code>sync</code> version of …","The <code>crate::stack_sync_box</code> macro is the <code>sync</code> and <code>boxed</code> …","Start the pool. If macros are used, this call is …","","Stop the thread pool. This function will ensure no new …","Stop all threads in the thread pool from executing new …","Get the <code>crate::ThreadPoolStopper</code> for this thread pool.","","","Macro used to configure/build a thread pool. Threadpools …","return matches associated with the supplied <code>text</code> for this …","Create a default instance of <code>crate::Match</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Utility to convert a u128 to an arbitrary length slice (up …","Utility to convert a u32 to an arbitrary length slice (up …","Utility to convert a u64 to an arbitrary length slice (up …","Utility to convert a usize to an arbitrary length slice …","","","","","","","","","","","","","","","","","","","","obtain a write lock and corresponding …","obtain a write lock and corresponding …","macro to call wlock and guard function on a <code>crate::LockBox</code> …","Same as <code>crate::LockBox::wlock</code> except that any poison …","","","","",""],"i":[0,0,11,0,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,42,43,44,45,46,47,28,27,3,0,0,0,0,0,7,7,10,0,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,12,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,69,66,41,12,23,42,25,7,42,43,44,45,46,47,28,27,7,42,43,44,45,46,47,28,27,23,26,43,41,42,29,42,45,51,52,27,29,42,7,42,11,28,33,46,0,33,45,7,42,43,11,10,46,47,28,27,3,3,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,12,3,4,58,3,4,0,51,52,0,0,0,0,0,0,0,0,26,4,58,10,28,27,7,7,3,26,12,23,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,7,69,65,66,4,58,88,42,43,44,45,11,46,47,28,27,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,69,65,66,28,11,3,28,41,12,23,7,42,41,42,29,32,42,42,0,0,0,0,0,0,0,0,0,12,23,12,23,69,69,65,66,66,44,45,69,65,66,69,66,69,66,69,66,69,66,0,29,32,42,42,32,42,41,32,42,42,0,0,0,0,0,0,0,0,12,12,7,42,43,28,45,45,45,45,45,45,45,45,45,45,45,45,45,28,12,23,12,25,26,0,26,0,0,44,45,33,41,12,23,33,7,42,44,45,0,3,43,3,43,12,23,0,0,0,0,15,42,15,42,0,0,0,0,33,27,33,47,33,69,66,0,30,0,7,42,43,44,45,46,47,28,27,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,0,0,0,0,7,69,65,66,4,58,51,52,88,42,43,44,45,11,10,46,47,28,27,25,26,0,26,7,42,43,28,44],"f":"`````````````````````````````````{{cb}d{}}00000000{f{{l{hj}}}}`````{{{n{c}}}{{A`{c}}}Ab}0{{{Ad{c}}}{{Af{cj}}}{}}`{ce{}{}}0000000000000000000000000000000000000{{Ahc}{{l{dj}}}{AjAb}}{{Alc}{{l{{n{c}}j}}}Ab}{{Alc}{{l{{`{{An{c}}}}j}}}{AbB`BbAj}}{{Alc}{{l{{Bd{An}}j}}}{AbB`BbAj}}{{Alc}{{l{{`{{An{c}}BfBh}}j}}}{AbB`BbAjBfBh}}{{Alc}{{l{{Bd{An}}j}}}{AbB`BbAjBfBh}}{{{Bl{Bj}}}{{l{{`{{Bn{c}}}}j}}}{AjC`BbB`Ab}}{{{Bl{Bj}}}{{l{{Bd{Bn}}j}}}}{{{Bl{Bj}}}{{l{{`{{Bn{c}}BfBh}}j}}}{AjC`BbB`Ab}}1{{{Bl{Bj}}}{{l{{`{{Ah{ce}}}}j}}}{AjC`BbB`Ab}{AjAb}}{{{Bl{Bj}}}{{l{{Bd{Ah}}j}}}}{{{Bl{Bj}}}{{l{{`{{Ah{ce}}BfBh}}j}}}{AjC`BbB`Ab}{AjAb}}1{{{Bl{Bj}}}{{l{{`{{An{c}}}}j}}}{AjB`Ab}}{{{Bl{Bj}}}{{l{{Bd{An}}j}}}}{{{Bl{Bj}}}{{l{{`{{An{c}}}}j}}}{AjB`BbAb}}1{c{{l{{`{{Cb{c}}}}j}}}{BfBh}}{c{{l{{Bd{Cd}}j}}}{BfBh}}{{{Bl{Bj}}}{{l{Cfj}}}}{{{Bl{Bj}}}{{l{Chj}}}}{{Alc}{{l{{`{{Cj{c}}}}j}}}Ab}{{Alc}{{l{{Bd{Cj}}j}}}Ab}{{Alc}{{l{{`{{Cj{c}}BfBh}}j}}}{AbBfBh}}{{Alc}{{l{{Bd{Cj}}j}}}{AbBfBh}}{{{Bl{Ch}}{Bl{Bj}}}{{l{{`{ClBfBh}}j}}}}{{{Bl{Ch}}{Bl{Bj}}}{{l{{Bd{Cl}}j}}}}{{}{{Bd{f}}}}{{}{{Cn{{Bd{f}}}}}}{{Alc}{{l{{`{{D`{c}}}}j}}}Ab}{{Alc}{{l{{Bd{D`}}j}}}Ab}{{Alc}{{l{{`{{D`{c}}BfBh}}j}}}{BfBhAb}}{{Alc}{{l{{Bd{D`}}j}}}{BfBhAb}}5{{{Bl{Bj}}}{{l{{`{{Db{ce}}}}j}}}{BfBh}{{Dj{Dd{Bd{Df}}}{{Dh{{l{dj}}}}}}BfAbBhDl}}{{DnDn}{{l{Dnj}}}}{c{{E`{e}}}{}{}}0{Eb{{l{dj}}}}{Ah{{l{dj}}}}{Bn{{l{dj}}}}{{{Ed{c}}}{{l{dj}}}{AbB`Bb}}{CbCb}{{{n{c}}}{{n{c}}}Ab}{{{Ed{c}}}{{Ed{c}}}Ab}{EfEf}{EhEh}{EjEj}{{{El{c}}}{{El{c}}}{BfBhAb}}{EnEn}{ChCh}{CfCf}{{ce}d{}{}}00000000{{Bnc}{{l{F`j}}}{AjAb}}{CdAl}{{}Ef}{Eb{{l{dj}}}}?{Cj{{Fb{c}}}{}}{{{Ed{c}}}{{Fb{c}}}Ab}{{Ej{A`{Fd}}{Fb{Al}}}{{l{dj}}}}{{{Ff{c}}}d{}}{{{Fh{c}}}d{}}{CfAl}{{Cjc}{{l{dj}}}{}}{{{Ed{c}}c}{{l{dj}}}Ab}{{{n{c}}{n{c}}}F`Bb}{{{Ed{c}}{Ed{c}}}F`Bb}{{{Af{ce}}{Af{ce}}}F`BbBb}{{ChCh}F`}{{DbeDd}{{l{{Ad{c}}j}}}{}{{Fj{}{{Dh{{l{cj}}}}}}Bf}}{{{El{c}}eDd}{{l{{Fl{{Af{cj}}}}j}}}{BfBh}{{Fj{}{{Dh{{l{cj}}}}}}Bf}}`{Db{{l{{El{c}}j}}}{BfBh}}{{EjFd}{{l{Fdj}}}}{{{n{c}}Fn}{{l{dG`}}}B`}{{{Ed{c}}Fn}{{l{dG`}}}{B`Ab}}{{EfFn}Gb}{{{Af{ce}}Fn}GbB`B`}{{{Ad{c}}Fn}GbB`}{{{El{c}}Fn}Gb{BfBhB`}}{{EnFn}Gb}{{ChFn}Gb}{{CfFn}Gb}{{fAl}{{l{dj}}}}{f{{l{Alj}}}}{cc{}}000000000000000000{{Ahc}{{l{{Fb{e}}j}}}{AjAb}Aj}{{fAl}{{l{Gdj}}}}{h{{A`{Fd}}}}{Gd{{A`{Fd}}}}{{fAl}{{l{hj}}}}2`{{{Ff{c}}}{{l{{Gf{c}}j}}}{BfBh}}{{{Fh{c}}}{{l{{Gh{c}}j}}}{}}````````{CdDd}{hAl}{GdAl}{{{Ad{c}}}Dd{}}{ChAl}{CfAl}{{{n{c}}Al}e{}{}}0{{fEf}{{l{dj}}}}{Cd{{Gl{{Gj{c}}}}}{BfBh}}{{Ahce}{{l{dj}}}{AjAb}Aj}{{Bnc}{{l{dj}}}{AjAb}}{ce{}{}}000000000000000000{{{Bd{c}}}{{Bd{Df}}}{}}000000000000000000{{{Gl{c}}}{{Gl{Df}}}{}}000000000000000{{{Gn{c}}}{{Gn{Df}}}{}}000000000000000000333{ChF`}{{{Af{ce}}}F`{}{}}{fF`}2{Eb{{Bd{H`}}}}{Ah{{Hb{ce}}}{AjAb}Aj}{Bn{{Hd{c}}}{AjAb}}{{{n{c}}}{{`{c}}}Ab}{{{Ed{c}}}{{Bd{H`}}}{AjAbB`Bb}}40{CjAl}{D`Al}{{{Ed{c}}}AlAb}0````````{Al{{Bd{Cd}}}}{AhAl}{BnAl}{AhHf}{BnHf}{cd{}}{c{{Hh{eg}}}{}{}{}}001{{{Fb{{Bd{Cd}}}}Al{Fb{Al}}}{{l{Ehj}}}}{{{Fb{{Bd{Cd}}}}Al{Fb{Al}}}{{l{Ejj}}}}{{{Hj{c}}}{{Fb{e}}}{AjAb}{}}{{{Hb{ce}}}{{Fb{g}}}{AjAb}{AjAb}{}}{{{Hd{c}}}{{Fb{e}}}{AjAb}{}}{c{{Hl{e}}}{}{}}0{c{{Hn{e}}}{}{}}01100`{Cj{{Fb{c}}}{}}{D`{{Fb{c}}}{}}{{{Ed{c}}}{{Fb{c}}}Ab}010{{Ebc}{{l{dj}}}{}}{{D`c}{{l{dj}}}{}}{{{Ed{c}}c}{{l{dj}}}{AbB`Bb}}{{{Ed{c}}c}{{l{dj}}}Ab}````{{{A`{Fd}}}d}{{}Dd}{{}I`}{{}Ib}{{AhcAl{Id{Fd}}}{{l{F`j}}}{AjAb}}{{AhcAl{Id{Fd}}Al}{{l{dj}}}{AjAb}}{c{{l{{n{e}}j}}}If{AjAb}}{c{{l{{Ed{e}}j}}}If{AjAbB`Bb}}{c{{l{Efj}}}If}{c{{l{Chj}}}If}{{Ej{A`{Fd}}}{{l{dj}}}}0{Ej{{l{Ihj}}}}{Ej{{l{Ijj}}}}{Ej{{l{Ilj}}}}{Ej{{l{Inj}}}}{Ej{{l{J`j}}}}{Ej{{l{Ddj}}}}{Ej{{l{Jbj}}}}{Ej{{l{I`j}}}}{Ej{{l{Ibj}}}}{Ej{{l{Fdj}}}}{Ej{{l{Alj}}}}{ChDn}{{Ahc}{{l{{Fb{e}}j}}}{AjAb}Aj}{{Bnc}{{l{F`j}}}{AjAb}}{Ah{{l{dj}}}}{Cb{{l{{Ff{c}}j}}}{BfBh}}{Cd{{l{{Ff{c}}j}}}{BfBh}}`0``{{EhAlAl}d}{{EjAlAl}d}{{Dbc}{{l{dj}}}{{Dj{Dd{Bd{Df}}}{{Dh{{l{dj}}}}}}BfAbBhDl}}{EbAl}{AhAl}{BnAl}{Db{{l{Alj}}}}{{{n{c}}}AlAb}{{{Ed{c}}}Al{AbB`Bb}}{{EhAl}{{l{dj}}}}{{EjAl}{{l{dj}}}}`{f{{l{Alj}}}}`0`{Ah{{l{{Fb{{Bd{Cd}}}}j}}}}{Bn{{l{{Fb{{Bd{Cd}}}}j}}}}{{{A`{Fd}}}{{l{Ddj}}}}{{{A`{Fd}}}{{l{I`j}}}}{{{A`{Fd}}}{{l{Ibj}}}}{{{A`{Fd}}}{{l{Alj}}}}{An{{l{dj}}}}{{{Ed{c}}}{{l{dj}}}{JdAbB`AjBb}}10````{Db{{l{dj}}}}{CfAl}1{En{{l{dj}}}}{Db{{l{Enj}}}}{c{{Jf{e}}}{}{}}0`{{Cl{A`{Fd}}{A`{Cf}}}{{l{Alj}}}}`{ce{}{}}00000000{c{{l{e}}}{}{}}0000000000000000000000000000000000000{cJh{}}000000000000000000{cJj{}}000000000000000000{{Dd{A`{Fd}}}{{l{dj}}}}{{I`{A`{Fd}}}{{l{dj}}}}{{Ib{A`{Fd}}}{{l{dj}}}}{{Al{A`{Fd}}}{{l{dj}}}}7777777777777777777{Cb{{l{{Fh{c}}j}}}{BfBh}}{Cd{{l{{Fh{c}}j}}}{BfBh}}`0{{{n{c}}e}{{l{dj}}}{AjAb}Jl}{{{Ed{c}}e}{{l{dj}}}{AjAbB`Bb}Jl}{{Efc}{{l{dj}}}Jl}{{Chc}{{l{dj}}}Jl}{{Ehc}{{l{dj}}}{{Jn{{A`{Fd}}}}}}","c":[],"p":[[5,"Private",560],[1,"unit"],[10,"SlabAllocator",0],[5,"SlabMut",0],[5,"Error",561],[6,"Result",562],[5,"Array",0],[1,"slice"],[10,"Clone",563],[5,"ThreadPoolHandle",0],[6,"PoolResult",0],[10,"Hashtable",0],[10,"Serializable",564],[1,"usize"],[10,"SortableList",0],[10,"Debug",565],[10,"PartialEq",566],[5,"Box",567],[10,"Send",568],[10,"Sync",568],[6,"ConfigOption",569],[5,"Vec",570],[10,"Hashset",0],[10,"Hash",571],[10,"Lock",0],[10,"LockBox",0],[5,"Match",0],[5,"Pattern",0],[10,"Queue",0],[10,"SearchTrie",0],[5,"UnsafeCell",572],[10,"Stack",0],[10,"ThreadPool",0],[1,"u128"],[10,"Any",573],[17,"Output"],[10,"FnMut",574],[10,"Unpin",568],[5,"String",575],[5,"Replacements",576],[10,"List",0],[5,"ArrayList",0],[5,"SlabAllocatorConfig",0],[5,"SlabWriter",0],[5,"SlabReader",0],[5,"ThreadPoolExecutor",0],[5,"ThreadPoolStopper",0],[1,"bool"],[6,"Option",577],[1,"u8"],[5,"RwLockReadGuardWrapper",0],[5,"RwLockWriteGuardWrapper",0],[10,"Future",578],[5,"Receiver",579],[5,"Formatter",565],[5,"Error",565],[8,"Result",565],[5,"Slab",0],[5,"RwLockReadGuard",580],[5,"RwLockWriteGuard",580],[5,"RwLock",580],[5,"Arc",581],[5,"Rc",582],[10,"Iterator",583],[5,"HashtableIterator",0],[5,"HashsetIterator",0],[1,"f64"],[1,"tuple"],[5,"ListIterator",0],[5,"Recompositions",584],[5,"Decompositions",585],[1,"u32"],[1,"u64"],[1,"array"],[10,"Reader",564],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"u16"],[10,"Ord",566],[5,"StreamSafe",586],[5,"TypeId",573],[1,"str"],[10,"Writer",564],[10,"AsRef",587],[5,"UtilBuilder",0]],"b":[[322,"impl-Stack%3CT%3E-for-ArrayList%3CT%3E"],[323,"impl-Queue%3CT%3E-for-ArrayList%3CT%3E"],[358,"impl-Stack%3CT%3E-for-ArrayList%3CT%3E"],[359,"impl-Queue%3CT%3E-for-ArrayList%3CT%3E"],[364,"impl-List%3CT%3E-for-ArrayList%3CT%3E"],[365,"impl-Stack%3CT%3E-for-ArrayList%3CT%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
