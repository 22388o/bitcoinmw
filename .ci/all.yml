steps:
  - script: |
      .ci\cargo_test.bat
    displayName: Windows Cargo Test
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
  - script: |
      .ci\perf.bat
    displayName: Windows Eventhandler Perf Test
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
  - script: |
      chmod 755 ./.ci/cargo_test.sh
      ./.ci/cargo_test.sh
    displayName: macOS Cargo Test
    condition: eq( variables['Agent.OS'], 'Darwin' )
  - script: |
      chmod 755 ./.ci/perf.sh
      ./.ci/perf.sh
    displayName: macOS Eventhandler Perf Test
    condition: eq( variables['Agent.OS'], 'Darwin' )
  - script: |
      chmod 755 ./.ci/cargo_test.sh
      ./.ci/cargo_test.sh
    displayName: Linux Cargo Test
    condition: eq( variables['Agent.OS'], 'Linux' )
  - script: |
      chmod 755 ./.ci/perf.sh
      ./.ci/perf.sh
    displayName: Linux Eventhandler Perf Test
    condition: eq( variables['Agent.OS'], 'Linux' )
  - script: 'cargo build --release --jobs 1'
    displayName: Build Release
    condition:  and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'), ne( variables['Agent.OS'], 'Windows_NT' ))
  - script: |
      SET OPENSSL_DIR=C:\Program Files\OpenSSL
      cargo build --release --jobs 1
    displayName: Build Release
    condition:  and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'), eq( variables['Agent.OS'], 'Windows_NT' ))
  - script: |
      MY_TAG="$(Build.SourceBranch)"
      MY_TAG=${MY_TAG#refs/tags/}
      echo $MY_TAG
      echo "##vso[task.setvariable variable=build.my_tag]$MY_TAG"
      echo "##vso[task.setvariable variable=build.platform]$PLATFORM"
    displayName: "Create my tag variable (*nix)"
    condition:  and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ), contains(variables['Build.SourceBranch'], 'refs/tags/'))
  - task: CopyFiles@2
    displayName: Copy assets (*nix)
    condition:  and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/target/release'
      contents: 'bmw'
      targetFolder: '$(Build.BinariesDirectory)/bmw'
  - task: ArchiveFiles@2
    displayName: Gather assets (*nix)
    condition:  and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/bmw'
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/bmw-$(build.my_tag)-$(build.platform).tar.gz'
  - script: |
      cd $(Build.ArtifactStagingDirectory) && openssl sha256 bmw-$(build.my_tag)-$(build.platform).tar.gz > bmw-$(build.my_tag)-$(build.platform)-sha256sum.txt
    displayName: Create Checksum (*nix)
    condition:  and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ), contains(variables['Build.SourceBranch'], 'refs/tags/'))
  - task: GithubRelease@0
    displayName: Github release (*nix)
    condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      gitHubConnection: 'bitcoinmw'
      repositoryName: 'cgilliard/bitcoinmw'
      action: 'edit'
      target: '$(build.sourceVersion)'
      tagSource: 'manual'
      tag: '$(build.my_tag)'
      assets: |
        $(Build.ArtifactStagingDirectory)/bmw-$(build.my_tag)-$(build.platform).tar.gz
        $(Build.ArtifactStagingDirectory)/bmw-$(build.my_tag)-$(build.platform)-sha256sum.txt
      title: '$(build.my_tag)'
      assetUploadMode: 'replace'
      addChangeLog: true
  - script: |
      SET MY_TAG=$(Build.SourceBranch)
      SET MY_TAG=%MY_TAG:~10%
      echo %MY_TAG%
      echo %PLATFORM%
      echo ##vso[task.setvariable variable=build.my_tag]%MY_TAG%
      echo ##vso[task.setvariable variable=build.platform]%PLATFORM%
    displayName: "Create my tag variable (win)"
    condition:  and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'), eq( variables['Agent.OS'], 'Windows_NT' ))
  - task: CopyFiles@2
    displayName: Copy assets (win)
    condition:  and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'), eq( variables['Agent.OS'], 'Windows_NT' ))
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)\target\release'
      contents: 'bmw.exe'
      targetFolder: '$(Build.BinariesDirectory)\bmw'
  - task: ArchiveFiles@2
    displayName: Gather assets (win)
    condition:  and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'), eq( variables['Agent.OS'], 'Windows_NT' ))
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)\bmw'
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\bmw-$(build.my_tag)-$(build.platform).zip'
  - script: |
      powershell -Command "cd $(Build.ArtifactStagingDirectory); get-filehash -algorithm sha256 bmw-$(build.my_tag)-$(build.platform).zip | Format-List |  Out-String | ForEach-Object { $_.Trim() } > bmw-$(build.my_tag)-$(build.platform)-sha256sum.txt"
    displayName: Create Checksum (win)
    condition:  and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'), eq( variables['Agent.OS'], 'Windows_NT' ))
  - task: GithubRelease@0
    displayName: Github release (win)
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq( variables['Agent.OS'], 'Windows_NT' ))
    inputs:
      gitHubConnection: 'bitcoinmw'
      repositoryName: 'cgilliard/bitcoinmw'
      action: 'edit'
      target: '$(build.sourceVersion)'
      tagSource: 'manual'
      tag: '$(build.my_tag)'
      assets: |
        $(Build.ArtifactStagingDirectory)\bmw-$(build.my_tag)-$(build.platform).zip
        $(Build.ArtifactStagingDirectory)\bmw-$(build.my_tag)-$(build.platform)-sha256sum.txt
      title: '$(build.my_tag)'
      assetUploadMode: 'replace'
      addChangeLog: true
  - script: |
      chmod 755 ./.ci/tarpaulin.sh
      ./.ci/tarpaulin.sh $(github_pat) $(Build.SourceVersion)
    displayName: Tarpaulin
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
  - script: |
      chmod 755 ./.ci/pushdocs.sh
      ./.ci/pushdocs.sh $(github_pat) $(Build.SourceVersion)
    displayName: Create and Push Docs
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
